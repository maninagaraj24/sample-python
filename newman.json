{
  "collection": {
    "_": {
      "postman_id": "ee51801f-4f92-4337-adac-f77ed55453c9"
    },
    "item": [
      {
        "id": "e216fa00-9217-4e98-aecd-041b76e88dab",
        "name": "Init",
        "item": [
          {
            "id": "c6fe9e53-81fa-40bc-bf33-93d8536ae4d6",
            "name": "Initreq",
            "request": {
              "url": {
                "path": [
                  "Init",
                  "Base",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \r\n    \"data\": {\r\n      \"software\": {\r\n        \"osType\": \"Marshmallow\",\r\n        \"osVendor\": \"Google\",\r\n        \"osName\": \"Android\",\r\n        \"osVersion\": \"6.1.0\"\r\n      },\r\n      \"network\": {\r\n        \"imsi\": \"832367839500833\",\r\n        \"gps\": \"\",\r\n        \"wlan\": \"\",\r\n        \"cellular\": \"\"\r\n      },\r\n      \"hardware\": {\r\n        \"keyboard\": \"QWERTY\",\r\n        \"screen\": \"320 X 240\",\r\n        \"model\": \"BlackBerry Curve 9220\",\r\n        \"imei\": \"011234587362135\",\r\n        \"display\": \"Touch Sensitive Optical Trackpad\",\r\n        \"vendor\": \"RIM\",\r\n        \"deviceType\":\"Marshmallow\"\r\n      },\r\n      \"appID\": \"0\",\r\n      \"app\": {\r\n        \"version\": \"0.0.9\",\r\n        \"name\": \"samco\",\r\n        \"channel\": \"androidmarket\",\r\n        \"build\": \"hybrid-phone\"\r\n      }\r\n    },\r\n    \"appID\": \"0\"\r\n  }\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f92ee366-6dea-4284-890c-ac910efd2cc7",
                  "type": "text/javascript",
                  "exec": [
                    "eval(globals.postmanBDD);",
                    "//eval(globals.basicRequestValidation)",
                    "",
                    "function basicRequestValidation ()",
                    "{",
                    "    //var request_body_json = JSON.parse(pm.request.body.raw)",
                    "    describe(\"Basic Request checks\", () =>",
                    "    {",
                    "       var is_base_URL_valid = ",
                    "       it(\"is Base URL correct\", () =>",
                    "       {",
                    "            expect(environment.BASE).to.eql(\"https://mdev-ws.globextranet.com/globecapital\")",
                    "        })",
                    "        ",
                    "        if(is_base_URL_valid !== true)",
                    "        {",
                    "            pm.environment.set(\"BASE\",\"https://mdev-ws.globextranet.com/globecapital\")",
                    "        }",
                    "        ",
                    "        /*",
                    "        var is_request_is_json = it(\"Is Request body has json\", () =>",
                    "        {",
                    "            expect(request_body_json).to.be.an('object')",
                    "        })",
                    "        ",
                    "        if(is_request_is_json)",
                    "        {",
                    "            it(\"Request has content-type as application/json\", () =>",
                    "            {",
                    "                request.should.have.header('Content-Type', 'application/json')",
                    "            })",
                    "        }",
                    "        */",
                    "        ",
                    "",
                    "    })",
                    "}",
                    "",
                    "postman.setGlobalVariable(\"basicRequestValidation\",basicRequestValidation)",
                    "",
                    "",
                    "basicRequestValidation()",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "9594df7d-217c-4cb4-bc90-2539ccb2ce23"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b4f6fc07-d20e-4a9e-a76d-d8d607ede9e2",
                  "type": "text/javascript",
                  "exec": [
                    "eval(globals.postmanBDD);",
                    "//eval(globals.basicResponseValidation)",
                    "",
                    "//Defining a function \"basicResponseValidation()\"\".",
                    "function basicResponseValidation ()",
                    "{",
                    "    describe(\"Basic Response Checks\", () =>",
                    "    {",
                    "        ",
                    "        it(\"The response is json\", () =>",
                    "        {",
                    "            response.should.be.json;",
                    "        })",
                    "",
                    "        it(\"status code is 200\", () =>",
                    "        {",
                    "            response.should.have.status(200)",
                    "        })",
                    "    })",
                    "}",
                    "",
                    "//storing the functino basicResponseValidation() in a global variable called \"basicResponseValidation.\"",
                    "postman.setGlobalVariable(\"basicResponseValidation\",basicResponseValidation)    ",
                    "",
                    "//calling the basicResponseValidation function, which is stored in a global variable called \"basicResponseValidation.\".",
                    "chai.use(basicResponseValidation)",
                    "",
                    "",
                    "it(\"Is response has key called 'appID'\", () =>",
                    "{",
                    "    expect(response.body.response.data).to.have.property('appID')",
                    "})",
                    "",
                    "",
                    "//checking APP_ID is not null and containing 32 characters.",
                    "var is_APP_ID_valid =  ",
                    "(",
                    "    it(\"is APP_ID not null\", () =>",
                    "    {",
                    "        assert((environment.APP_ID).should.not.equal(\"\"),\"APP_ID cannot be null.\")",
                    "    })",
                    "",
                    "&&",
                    "",
                    "    it(\"Is APP_ID has 32 characters\", () =>",
                    "    {",
                    "        expect(environment.APP_ID.length).to.equal(32)",
                    "    })",
                    ")",
                    "",
                    "//if APP_ID invalid, change it to one that you got in your response.",
                    "if(is_APP_ID_valid === false)",
                    "{",
                    "    pm.environment.set(\"APP_ID\",response.body.response.data.appID)",
                    "    postman.setNextRequest(\"Initreq\")",
                    "}",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "aba50b1d-a958-4ce4-b47f-b50cff0de4d3"
                }
              }
            ]
          },
          {
            "id": "5c62ffcc-2c5b-47e6-be8a-097526f4d440",
            "name": "Config",
            "request": {
              "url": {
                "path": [
                  "Config",
                  "Base",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \"requestType\": \"U\",\r\n    \"data\": {\r\n      \"app\": \"0\",\r\n      \"message\": \"0\"\r\n    },\r\n    \"appID\": {{APP_ID}},\r\n    \"formFactor\": \"M\"\r\n  }\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "18d23ba7-bf3f-4046-8703-bca59ddfd703",
                  "type": "text/javascript",
                  "exec": [
                    "eval(globals.postmanBDD);",
                    "eval(globals.basicResponseValidation)",
                    "",
                    "chai.use(basicResponseValidation)",
                    ""
                  ],
                  "_lastExecutionId": "b30811d9-4154-4da6-85cf-af8f2c270e41"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "1745c058-7205-46a1-a72f-0f877aafeb67",
                  "type": "text/javascript",
                  "exec": [
                    "eval(globals.postmanBDD)",
                    "eval(globals.basicRequestValidation)",
                    "",
                    "chai.use(basicRequestValidation)"
                  ],
                  "_lastExecutionId": "01345eb2-45d0-4931-9f3c-91d18fdda8f0"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "83445bba-5753-4285-a9b1-a74f7242b916",
        "name": "Login and 2FA",
        "item": [
          {
            "id": "82058a8a-d675-4ca4-8ed2-9d7f45cb0d63",
            "name": "Login",
            "request": {
              "url": {
                "path": [
                  "User",
                  "Login",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n   \"request\":{\n   \n   \n   \"data\":{\n   \n   \n   \t\"userID\":{{UserId}},\n\t\t\"password\":{{Password}}\n \n   },\n  \n  \n   \"appID\":{{APP_ID}}\n}\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9370ec04-09cf-443a-8742-10cbecaffcc8",
                  "type": "text/javascript",
                  "exec": [
                    "eval(pm.globals.get('postmanBDD'));",
                    "eval(globals.basicResponseValidation)",
                    "",
                    "chai.use(basicResponseValidation)",
                    "",
                    "",
                    "//var responseJSON = response.body",
                    "var both_un_pwd_wrong = ((environment.UserId != \"MS6\") && (environment.Password != \"globe@678\")) ",
                    "var either_un_pwd_wrong = ((environment.UserId != \"MS6\") || (environment.Password != \"globe@678\"))",
                    "var un_crct_pwd_wrong = ((environment.UserId == \"MS6\") && (environment.Password != \"globe@678\"))",
                    "",
                    "//Valid username and password validation",
                    "if((environment.UserId== \"MS6\") && (environment.Password == \"globe@678\"))",
                    "{",
                    "    pm.environment.set(\"Attempts Remaining\",0)",
                    "    pm.environment.set(\"isLoggedIn\",true)",
                    "    //storing the sessionvalue",
                    "    pm.environment.set(\"session_id\",pm.cookies.get('sessionID'))",
                    "    ",
                    "    //checking logon status is 'OK'",
                    "    var logon_status_ok = it(\"Is logonstatus is 'OK'\", () =>",
                    "    {",
                    "       expect(response.body.response.data.logonStatus).to.eql(\"OK\");",
                    "      ",
                    "    });",
                    "    ",
                    "    //checking 2FA is enabled",
                    "    var is_2fa_enabled = it(\"is is2FA Enabled\", () =>",
                    "    {",
                    "        expect(response.body.response.data.is2FAEnabled).to.eql(true);",
                    "    })",
                    "    ",
                    "    it(\"Is userID in response is same as the actual username with which logged in\", () =>",
                    "    {",
                    "        expect(environment.UserId).to.eql(response.body.response.data.userID)",
                    "    })",
                    "    ",
                    "        ",
                    "    if(logon_status_ok && is_2fa_enabled)",
                    "    {",
                    "        postman.setNextRequest(\"2FA\");",
                    "    }",
                    "}",
                    "",
                    "else if(un_crct_pwd_wrong)",
                    "{",
                    "    it(\"Invalid Password\", () =>",
                    "    {",
                    "        if(pm.environment.get(\"Attempts Remaining\")<=19)",
                    "        {",
                    "            pm.environment.set(\"Attempts Remaining\",pm.environment.get(\"Attempts Remaining\")+1)",
                    "            expect(response.body.response.infoMsg).to.eql(\"Incorrect Client ID or Password. Attempt \"+pm.environment.get(\"Attempts Remaining\")+\" of 20\")",
                    "        }",
                    "        ",
                    "    })",
                    "    ",
                    "    postman.setNextRequest(\"Logout\")",
                    "   ",
                    "}",
                    "",
                    "//Both username and password are invalid",
                    "    else if ((environment.UserId === \"\") && (environment.Password === \"\"))",
                    "    {",
                    "        it(\"Is username and password field empty\", () =>",
                    "        {",
                    "            expect(response.body).to.be.empty",
                    "        })",
                    "        ",
                    "         postman.setNextRequest(\"Logout\")",
                    "    }",
                    "",
                    "//Both username or password is wrong (OR) Either of username or password is invalid ",
                    "    else if(both_un_pwd_wrong || either_un_pwd_wrong)",
                    "    {",
                    "        it(\"invalid  json response validation\", () =>",
                    "        {",
                    "            expect(response.body.response.infoMsg).to.equal(\"Incorrect Client ID or Password\")",
                    "        })",
                    "         postman.setNextRequest(\"Logout\")",
                    "    }",
                    "",
                    "",
                    "",
                    "//===========================================================================================================================",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "ec38a4dc-29f0-4d62-bff8-808bc5a7a947"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "36604118-cf51-4a64-bd92-43f15aa7d73f",
                  "type": "text/javascript",
                  "exec": [
                    "eval(globals.postmanBDD);",
                    "eval(globals.basicRequestValidation)",
                    "",
                    "",
                    "",
                    "/*",
                    "if(pm.environment.get(\"APP_ID\").length !== 32)",
                    "{",
                    "    if(pm.environment.get(\"APP_ID\").length < 32)",
                    "    {",
                    "        pm.test(\"Is APP_ID has 32 characters\",function()",
                    "        {",
                    "            expect((pm.environment.get(\"APP_ID\").length) === 32,\"Length of APP_ID is less than 32\");   ",
                    "        });",
                    "        ",
                    "    }",
                    "    else if(pm.environment.get(\"APP_ID\").length > 32)",
                    "    {",
                    "        pm.test(\"Is APP_ID has 32 characters\",function()",
                    "        {",
                    "            assert((pm.environment.get(\"APP_ID\").length) === 32,\"Length of APP_ID is greater than 32\");",
                    "        });",
                    "        ",
                    "    }",
                    "    postman.setNextRequest(null);",
                    "}",
                    "",
                    "*/",
                    "",
                    "chai.use(basicRequestValidation)",
                    "",
                    "",
                    "//Request json validation should contain keys['userID','Password']",
                    "/*var request_json = JSON.parse(pm.request.body.raw)",
                    "",
                    "it(\"Is request json has keys userid and password\", () =>",
                    "{",
                    "    expect(request_json.request.data).should.have.keys(['userID', 'Password'])",
                    "})",
                    "*/",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "8b0f47d6-e50c-4d12-bc29-355c13ad7513"
                }
              }
            ]
          },
          {
            "id": "ed62150d-a29d-4dfe-8a38-efade91508d9",
            "name": "Login Copy",
            "request": {
              "url": {
                "path": [
                  "User",
                  "Login",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n   \"request\":{\n   \n   \n   \"data\":{\n   \n   \n   \t\"userID\":{{UserId}},\n\t\t\"password\":{{Password}}\n \n   },\n  \n  \n   \"appID\":{{APP_ID}}\n}\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9370ec04-09cf-443a-8742-10cbecaffcc8",
                  "type": "text/javascript",
                  "exec": [
                    "eval(pm.globals.get(\"postmanBDD\"));",
                    "",
                    "var assert = require('chai').assert;",
                    "var expect = require('chai').expect;",
                    "",
                    "",
                    "expect(pm.response.to.have.status(200),\"Status code should be 200\");",
                    "",
                    "console.log(pm.environment.get(\"APP_ID\").length);",
                    "",
                    "",
                    "",
                    "",
                    "//============================================================================================================================",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "36604118-cf51-4a64-bd92-43f15aa7d73f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "4eeac47c-0214-4e81-9bd2-ddc9b5612882",
            "name": "2FA",
            "request": {
              "url": {
                "path": [
                  "User",
                  "Validate2FA",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n\r\n\"data\": {\r\n      \"token\": \"01012019\"\r\n},\r\n\"appID\":{{APP_ID}}\r\n  }\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "241aef44-8919-4fee-a77b-1a3fd8c182e1",
                  "type": "text/javascript",
                  "exec": [
                    "eval(pm.globals.get('postmanBDD'));",
                    "eval(globals.basicResponseValidation)",
                    "",
                    "chai.use(basicResponseValidation)",
                    "",
                    "function isSessionMaintained()",
                    "{",
                    "    it(\"Is sessionId Maintained\", () =>",
                    "    {",
                    "        expect(pm.cookies.get('sessionID')).to.eql(environment.session_id)",
                    "    })",
                    "}",
                    "postman.setGlobalVariable(\"isSessionMaintained\",isSessionMaintained)",
                    "",
                    "if((environment.UserId == \"MS6\") && (environment.Password == \"globe@678\") && (environment.token == \"01012019\"))",
                    "{",
                    "    chai.use(isSessionMaintained)",
                    "    ",
                    "    it(\"is OTP validated successfully\" , () =>",
                    "    {",
                    "        expect(response.body.response.data.msg).to.eql(\"OTP validated successfully\")",
                    "    })",
                    "}",
                    "",
                    "",
                    "else if ((environment.UserId == \"MS6\") && (environment.Password== \"globe@678\") && (environment.token === null))",
                    "{",
                    "    ",
                    "    it(\"Empty OTP validation\" ,() => ",
                    "    {",
                    "        expect(response.body.response.data.msg).to.eql(\"Please Enter OTP\")",
                    "    })",
                    "}",
                    "",
                    "",
                    "else if ((environment.UserId== \"MS6\") && (environment.Password == \"globe@678\") && (environment.token!= \"01012019\")) ",
                    "{",
                    "    ",
                    "    it(\"invalid OTP validation\" , () =>",
                    "    {",
                    "        expect(response.body.response.data.msg).to.eql(\"invalid OTP\")",
                    "    })",
                    "}",
                    "",
                    "",
                    "postman.setNextRequest(\"Logout\");",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                  ]
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "53df53a3-6cbd-4ace-9786-6866c3e32373",
                  "type": "text/javascript",
                  "exec": [
                    "eval(globals.postmanBDD);",
                    "eval(globals.basicRequestValidation)",
                    "",
                    "chai.use(basicRequestValidation)",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "ee1a4895-4504-45ce-a47d-697fb00ad9d8",
        "name": "Password",
        "item": [
          {
            "id": "8a00f400-18df-40d3-b73d-d520d5de7df0",
            "name": "ChangePassword",
            "request": {
              "url": {
                "path": [
                  "User",
                  "ChangePassword",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n\t\r\n\t\"data\": {\r\n\t\t\"userID\":{{UserId}},\r\n\t\t\"password\":{{Password}},\r\n\t\t\"newPwd\":\"globe@012\"\r\n\t},\r\n\t\"appID\":{{APP_ID}}\r\n  }\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "85780e6d-5da2-4633-9b0f-26a6844ca1d0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () ",
                    "{",
                    "    pm.response.to.have.status(200);",
                    "}",
                    ");",
                    "//===================================================================================================================",
                    "pm.test(\"The response is JSON\",function()",
                    "{",
                    "    pm.response.to.be.json;",
                    "}",
                    ");",
                    "",
                    "var reqJSONString = pm.request.body.raw;",
                    "console.log(reqJSONString);",
                    "",
                    "var newPassword = JSON.parse(reqJSONString);",
                    "",
                    "pm.environment.set(\"newPassword\",newPassword.request.data.newPwd);",
                    "",
                    "    ",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "43e2af62-4ffd-4d5b-be29-2331a1856177",
            "name": "ForgotPassword",
            "request": {
              "url": {
                "path": [
                  "User",
                  "ForgotPassword",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"request\": {\r\n        \"appID\": {{APP_ID}},\r\n        \"data\": {\r\n            \"userID\": {{UserId}},\r\n            \"phoneNo\": \"9500170055\",\r\n            \"pan\": \"ABCDE1234A\"\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c108c913-14f3-45ce-a847-5addb1a51557",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () ",
                    "{",
                    "    pm.response.to.have.status(200);",
                    "}",
                    ");",
                    "//===================================================================================================================",
                    "pm.test(\"The response is JSON\",function()",
                    "{",
                    "    pm.response.to.be.json;",
                    "}",
                    ");"
                  ]
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "5f4ca0f9-c956-4590-b998-bb4342f78f7b",
        "name": "WatchList",
        "item": [
          {
            "id": "92acab57-7310-428b-8243-61c5e804d73e",
            "name": "CreateWatchList",
            "request": {
              "url": {
                "path": [
                  "Watchlist",
                  "CreateWatchlist",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \"data\": {\r\n      \"watchlistName\": \"new_watchlist\",\r\n      \"symbolList\": [\r\n        \r\n      ]\r\n    },\r\n    \"appID\": {{APP_ID}}\r\n  }\r\n}\r\n\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6a4d492c-2b5a-4f43-867e-b7ca34c73c48",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () ",
                    "{",
                    "    pm.response.to.have.status(200);",
                    "}",
                    ");",
                    "//===================================================================================================================",
                    "pm.test(\"The response is JSON\",function()",
                    "{",
                    "    pm.response.to.be.json;",
                    "}",
                    ");",
                    "",
                    "/*",
                    "var reqJSONString = pm.request.body.raw;",
                    "console.log(reqJSONString);",
                    "",
                    "var watchListName = JSON.parse(reqJSONString);",
                    "",
                    "watchListName = watchListName.request.data.watchlistName;",
                    "console.log(watchListName);",
                    "",
                    "",
                    "pm.environment.set(\"no_of_watchlists\",(pm.environment.get(\"no_of_watchlists\")+1));",
                    "",
                    "*/"
                  ]
                }
              }
            ]
          },
          {
            "id": "dd5e2edb-1903-40fe-bd9b-aec190a51485",
            "name": "GetWatchList",
            "request": {
              "url": {
                "path": [
                  "Watchlist",
                  "GetWatchlist",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \r\n    \"data\": {\r\n    },\r\n    \t\"appID\":{{APP_ID}}\r\n  }\r\n}\r\n\t\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "41aeab50-a70e-497a-8280-cf817091bbab",
            "name": "GetSymbols",
            "request": {
              "url": {
                "path": [
                  "Watchlist",
                  "GetSymbols",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \r\n    \"data\": {\r\n      \"watchlistId\": \"1\", \r\n      \"watchlistName\": \"\"\r\n         \r\n    },\r\n    \t\"appID\":{{APP_ID}}\r\n  }\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "143cdaa8-8ea6-40b6-a2a9-dd4c9578c073",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () ",
                    "{",
                    "    pm.response.to.have.status(200);",
                    "}",
                    ");",
                    "//===================================================================================================================",
                    "pm.test(\"The response is JSON\",function()",
                    "{",
                    "    pm.response.to.be.json;",
                    "}",
                    ");",
                    "",
                    "//var keys[] = pm.response.json().response.data.symbolList.keys;",
                    "",
                    "var symbols = pm.response.json().response.data.symbolList;",
                    "var symbolsCount = pm.response.json().response.data.symbolList.length;",
                    "console.log(symbolsCount);",
                    "//var symbolName,symbolExchange;",
                    "",
                    "var duplicateSymbolsList = [];",
                    "console.log(duplicateSymbolsList);",
                    "var IsDuplicatePres = false;",
                    "",
                    "//console.log(duplicateSymbolsList[0]);",
                    "",
                    "console.log(duplicateSymbolsList.length);",
                    "",
                    "//if((symbols[i].symbol !== symbols[j].symbol) && (symbols[i].exch !== symbols[j].exch))",
                    "",
                    "//",
                    "",
                    "",
                    "for(var i=0;i<symbolsCount;i++)",
                    "{",
                    "    for(var j=0;j<symbolsCount;j++)",
                    "    {",
                    "        if(i!==j)",
                    "        {",
                    "            if((symbols[i].symbol === symbols[j].symbol) && (symbols[i].exch === symbols[j].exch))",
                    "            {",
                    "                duplicateSymbolsList.push(i);",
                    "                duplicateSymbolsList.push(symbols[i].symbol);",
                    "                duplicateSymbolsList.push(symbols[i].exch);",
                    "                IsDuplicatePres=true;",
                    "                //console.log(\"i m inside if\");",
                    "            }",
                    "            ",
                    "        } ",
                    "    }",
                    "       ",
                    "}",
                    "pm.test(\"Is Duplicate present in SymbolList \", function(){",
                    "    pm.expect(IsDuplicatePres.to.eql(true));",
                    "});",
                    "console.log(duplicateSymbolsList);",
                    "",
                    "for(var i=0;i<(duplicateSymbolsList.length)-3;i++)",
                    "{",
                    "    ",
                    "    console.log(duplicateSymbolsList[i],duplicateSymbolsList[i+1],duplicateSymbolsList[i+2]+ \" is duplicated\");",
                    "}",
                    "",
                    ""
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "d1695117-8739-484e-b3ed-ac2f9ce11604",
            "name": "UpdateWatchList",
            "request": {
              "url": {
                "path": [
                  "Watchlist",
                  "UpdateWatchlist",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \"data\": {\r\n      \"watchlistId\": \"1\",\r\n      \"watchlistName\": \"NEW123\",\r\n      \"symbolList\": [\r\n       {\r\n                    \"symbol\": \"INDUSINDBK\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"5258\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"INDUSIND BANK LIMITED\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"5258_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"USDJPY\",\r\n                    \"dispPriceTick\": \"0.01\",\r\n                    \"lotSize\": \"1000\",\r\n                    \"exch\": \"NSECDS\",\r\n                    \"precision\": \"4\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"13\",\r\n                        \"token\": \"1236\"\r\n                    },\r\n                    \"symDetails\": \"APR FUT\",\r\n                    \"compName\": \"USDJPY20APRFUT\",\r\n                    \"priceTick\": \"1\",\r\n                    \"symbolToken\": \"1236_13\"\r\n                },\r\n                {\r\n                    \"symbol\": \"INFY\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"1594\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"INFOSYS LIMITED\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"1594_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"WIPRO\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"3787\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"WIPRO LTD\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"3787_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"YESBANK\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"11915\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"YES BANK LIMITED\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"11915_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"AXISBANK\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"5900\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"AXIS BANK LIMITED\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"5900_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"SBILIFE\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"21808\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"SBI LIFE INSURANCE CO LTD\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"21808_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"NIFTYEES\",\r\n                    \"dispPriceTick\": \"0.01\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"9059\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"EDELWEISS ETF - NIFTY 50\",\r\n                    \"priceTick\": \"1\",\r\n                    \"symbolToken\": \"9059_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"HCLTECH\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"7229\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"HCL TECHNOLOGIES LTD\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"7229_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"USDINR\",\r\n                    \"dispPriceTick\": \"0.0025\",\r\n                    \"lotSize\": \"1000\",\r\n                    \"exch\": \"NSECDS\",\r\n                    \"precision\": \"4\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"13\",\r\n                        \"token\": \"1235\"\r\n                    },\r\n                    \"symDetails\": \"APR FUT\",\r\n                    \"compName\": \"USDINR20APRFUT\",\r\n                    \"priceTick\": \"25\",\r\n                    \"symbolToken\": \"1235_13\"\r\n                },\r\n                {\r\n                    \"symbol\": \"RELIANCE\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"2885\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"RELIANCE INDUSTRIES LTD\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"2885_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACC\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"22\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACC LIMITED\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"22_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACCELYA\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"7053\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACCELYA SOLN INDIA LTD\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"7053_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACCORD\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"2000\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"21217\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACCORD SYNERGY LIMITED\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"21217_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACCURACY\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1600\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"3639\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACCURACY SHIPPING LIMITED\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"3639_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACE\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"13587\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACTION CONST EQUIP LTD\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"13587_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACEINTEG\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"3000\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"21286\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACE INTEGRATED SOLU. LTD.\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"21286_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACC\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"BSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"3\",\r\n                        \"token\": \"500410\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACC LTD.\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"500410_3\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACCEL\",\r\n                    \"dispPriceTick\": \"0.01\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"BSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"3\",\r\n                        \"token\": \"517494\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACCEL LIMITED\",\r\n                    \"priceTick\": \"1\",\r\n                    \"symbolToken\": \"517494_3\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACCELYA\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"BSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"3\",\r\n                        \"token\": \"532268\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACCELYA SOLUTIONS INDIA L\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"532268_3\"\r\n                },\r\n                {\r\n                    \"symbol\": \"ACCENTECH\",\r\n                    \"dispPriceTick\": \"0.01\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"BSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"3\",\r\n                        \"token\": \"531897\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"ACCENTIA TECHNOLOGIES LTD\",\r\n                    \"priceTick\": \"1\",\r\n                    \"symbolToken\": \"531897_3\"\r\n                },\r\n                {\r\n                    \"symbol\": \"SBIN\",\r\n                    \"dispPriceTick\": \"0.01\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"20520\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"BOND 9.50% PA SERIES 2\",\r\n                    \"priceTick\": \"1\",\r\n                    \"symbolToken\": \"20520_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"HDFC\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"1330\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"HDFC LTD\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"1330_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"TCS\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"11536\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"TATA CONSULTANCY SERV LT\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"11536_1\"\r\n                },\r\n                {\r\n                    \"symbol\": \"INDBANK\",\r\n                    \"dispPriceTick\": \"0.05\",\r\n                    \"lotSize\": \"1\",\r\n                    \"exch\": \"NSE\",\r\n                    \"precision\": \"2\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"1\",\r\n                        \"token\": \"16933\"\r\n                    },\r\n                    \"symDetails\": \"\",\r\n                    \"compName\": \"INDBANK MERCH BANK\",\r\n                    \"priceTick\": \"5\",\r\n                    \"symbolToken\": \"16933_1\"\r\n                },\r\n                 {\r\n                    \"symbol\": \"USDINR\",\r\n                    \"dispPriceTick\": \"0.0025\",\r\n                    \"lotSize\": \"1000\",\r\n                    \"exch\": \"NSECDS\",\r\n                    \"precision\": \"4\",\r\n                    \"streamInfo\": {\r\n                        \"mktSegId\": \"13\",\r\n                        \"token\": \"3687\"\r\n                    },\r\n                    \"symDetails\": \"JAN FUT\",\r\n                    \"compName\": \"USDINR20JANFUT\",\r\n                    \"priceTick\": \"25\",\r\n                    \"symbolToken\": \"3687_13\"\r\n                }\r\n      ]\r\n    },\r\n    \"appID\": {{APP_ID}}\r\n  }\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": []
          },
          {
            "id": "0e2c9cdd-f3a3-4a8b-93ce-876975938c3c",
            "name": "DeleteWatchList",
            "request": {
              "url": {
                "path": [
                  "Watchlist",
                  "DeleteWatchlist",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \r\n    \"data\": {\r\n       \"watchlistId\": \"\",\r\n      \"watchlistName\": \"\"\r\n    },\r\n    \t\"appID\":{{APP_ID}}\r\n  }\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1a6f9644-0191-46ac-aaa2-ef94caf356a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () ",
                    "{",
                    "    pm.response.to.have.status(200);",
                    "}",
                    ");",
                    "//===================================================================================================================",
                    "pm.test(\"The response is JSON\",function()",
                    "{",
                    "    pm.response.to.be.json;",
                    "}",
                    ");",
                    "//===================================================================================================================",
                    "",
                    "pm.environment.set(\"no_of_watchlists\",(pm.environment.get(\"no_of_watchlists\")-1));"
                  ]
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "f0598e34-4fed-4491-b7d8-4d42a7513ed9",
        "name": "Quote",
        "item": [
          {
            "id": "b45e42cf-31dd-463c-bd7e-680a2595863f",
            "name": "Get Quote",
            "request": {
              "url": {
                "path": [
                  "Market",
                  "GetQuoteSymbolDetails",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \"data\": {\r\n      \"symObj\": {\r\n        \"symbol\": \"ACC\",\r\n        \"lotSize\": \"1\",\r\n        \"precision\": \"2\",\r\n        \"dispSymDetails\": \"NSE\",\r\n        \"streamInfo\": {\r\n          \"mktSegId\": \"1\",\r\n          \"token\": \"22\"\r\n        },\r\n        \"token\": \"22\",\r\n        \"mktSegId\": \"1\",\r\n        \"tickPrice\": \"5\",\r\n        \"series\": \"EQ \",\r\n        \"exch\": \"NSE\",\r\n        \"expiry\": \"\",\r\n        \"dispSymbol\": \"ACC\",\r\n        \"symDetails\": \"NSE\",\r\n        \"instName\": \"EQUITIES\",\r\n        \"symbolToken\": \"22_1\",\r\n        \"strikePrice\": \"\",\r\n        \"option\": \"\"\r\n      }\r\n    },\r\n    \"appID\": {{APP_ID}}\r\n  }\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3361501-4ffd-4338-987e-f21cb5a0678a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac52c0c5-6977-4833-816f-472e80e52bb0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ],
        "protocolProfileBehavior": {}
      },
      {
        "id": "1ccfed0c-aecf-4bd8-a0db-c6dbbef99dee",
        "name": "Logoff",
        "item": [
          {
            "id": "b58351b7-7f7d-49b9-9907-6e811e30922d",
            "name": "Logout",
            "request": {
              "url": {
                "path": [
                  "User",
                  "LogOff",
                  "1.0.0"
                ],
                "host": [
                  "{{BASE}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "name": "Content-Type",
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"request\": {\r\n    \"data\": {},\r\n    \"appID\":  {{APP_ID}}\r\n  }\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad19b0f1-e4dd-44e9-ab60-3e2e69add2e1",
                  "type": "text/javascript",
                  "exec": [
                    "eval(globals.postmanBDD)",
                    "eval(globals.basicResponseValidation)",
                    "eval(globals.isSessionMaintained)",
                    "",
                    "pm.test(\"Status code is 200\", function () ",
                    "{",
                    "    pm.response.to.have.status(200);",
                    "}",
                    ");",
                    "//===================================================================================================================",
                    "pm.test(\"The response is JSON\",function()",
                    "{",
                    "    pm.response.to.be.json;",
                    "}",
                    ");",
                    "",
                    "chai.use(isSessionMaintained)",
                    "",
                    "/*",
                    "pm.environment.set(\"infoMsg\",pm.response.json().response.infoMsg);",
                    "",
                    "",
                    "",
                    "",
                    "if(pm.environment.get(\"infoMsg\") === \"\")",
                    "{",
                    "   pm.test(\"Successfull Logged out Validation\", function()",
                    "   {",
                    "       pm.expect(pm.response.json().response.data.msg === \"User Logged out sucessfull\");",
                    "   });",
                    "}",
                    "",
                    "else if(pm.environment.get(\"infoMsg\") === \"Request Failed\")",
                    "{",
                    "   pm.test(\"UnSuccessfull Logged out Validation\", function()",
                    "   {",
                    "       pm.expect(pm.response.json().response.infoMsg === \"Request Failed;\");",
                    "   });",
                    "}",
                    "",
                    "else",
                    "{",
                    "      pm.test(\"Logged in from some other terminal\", function()",
                    "   {",
                    "       pm.expect(pm.response.json().response.infoMsg === \"You have logged in from some other terminal\");",
                    "   });",
                    "}",
                    "",
                    "*/",
                    "if(environment.isLoggedIn === true)",
                    "{",
                    "   var isloggedout = it(\"Is Logged out\", () =>",
                    "    {",
                    "        expect(response.body.response.data.msg).to.equal('User logged out successfully')",
                    "    })",
                    "    ",
                    "    if(isloggedout === true)",
                    "    {",
                    "        pm.environment.set('isLoggedIn',false)",
                    "         postman.setNextRequest(null)",
                    "    }",
                    " ",
                    "}",
                    "else if(environment.isLoggedIn === false)",
                    "{",
                    "    it(\"Is clicking logout for more than once\", () =>",
                    "    {",
                    "         expect(response.body.response.infoMsg == 'Request Failed;')",
                    "    })",
                    "     postman.setNextRequest(null)",
                    "   ",
                    "}",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "08a16cc8-b0b4-44c1-8603-4860d2d5c2c5"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "ee51801f-4f92-4337-adac-f77ed55453c9",
      "name": "GlobeCapital",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-01-27T06:22:41.715Z",
      "postman_exported_using": "Postman/7.16.1"
    },
    "id": "9482e9ba-a63a-4ae9-8d8d-b0311df75d91",
    "name": "TestingGlobal",
    "values": [
      {
        "type": "any",
        "value": "",
        "key": ""
      },
      {
        "type": "any",
        "value": "https://mdev-ws.globextranet.com/globecapital",
        "key": "BASE"
      },
      {
        "type": "any",
        "value": "MS6",
        "key": "UserId"
      },
      {
        "type": "any",
        "value": "globe@678678",
        "key": "Password"
      },
      {
        "type": "any",
        "value": "51c3a70f53e11c6999734132aedeb7a0",
        "key": "APP_ID"
      },
      {
        "type": "any",
        "value": "01012019",
        "key": "token"
      },
      {
        "type": "any",
        "value": "7f84b72816e2905b7c123102f721ee72",
        "key": "session_id"
      },
      {
        "type": "any",
        "value": 3,
        "key": "Attempts Remaining"
      },
      {
        "type": "any",
        "value": false,
        "key": "isLoggedIn"
      }
    ]
  },
  "globals": {
    "_": {
      "postman_variable_scope": "globals",
      "postman_exported_at": "2020-01-24T09:40:53.606Z",
      "postman_exported_using": "Postman/7.16.0"
    },
    "id": "4d7f7264-b953-4801-8b3d-516f85c95eff",
    "name": "My Workspace Globals",
    "values": [
      {
        "type": "any",
        "value": "/*!\n * Postman BDD v5.0.6 (April 8th 2018)\n * \n * https://bigstickcarpet.github.io/postman-bdd\n * \n * @author  James Messinger (http://bigstickcarpet.com)\n * @license MIT\n */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.postmanBDD=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){\"use strict\";var url=require(\"url\"),cookies=require(\"./cookies\"),ipV4Pattern=/^(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){3}$/,ipV6Pattern=/^(?:(?:[0-9a-fA-F:]){1,4}(?:(?::(?:[0-9a-fA-F]){1,4}|:)){2,7})+$/,contentTypes={json:\"application/json\",text:\"text/plain\",html:\"text/html\",xml:\"application/xml\"};function chaiHttp(e,t){var o=e.Assertion;o.addMethod(\"status\",function(e){new o(this._obj).to.have.property(\"status\");var t=this._obj.status;this.assert(t===e,\"expected the response to have status code #{exp} but got #{act}\",\"expected the response to not have status code #{act}\",e,t)}),o.addProperty(\"headers\",function(){var e=this._obj.method?\"request\":\"response\";this.assert(Object.keys(this._obj.headers||{}).length>0,\"expected the \"+e+\" to have headers\",\"expected the \"+e+\" to not have any headers\")}),o.addMethod(\"header\",function(e,t){var o=getHeader(this._obj,e),a=void 0!==o&&null!==o;arguments.length<2?this.assert(a,\"expected header #{exp} to exist\",\"expected header #{exp} to not exist\",e,o):t instanceof RegExp?this.assert(a&&t.test(o),\"expected header '\"+e+\"' to match #{exp} but got #{act}\",\"expected header '\"+e+\"' to not match #{exp} but got #{act}\",t,a?o:\"<header-not-set>\"):this.assert(a&&o===t,\"expected header '\"+e+\"' to have value #{exp} but got #{act}\",\"expected header '\"+e+\"' to not have value #{exp}\",t,a?o:\"<header-not-set>\")}),o.addProperty(\"ip\",function(){var e=ipV4Pattern.test(this._obj)||ipV6Pattern.test(this._obj);this.assert(e,\"expected #{this} to be an ip\",\"expected #{this} to not be an ip\")}),Object.keys(contentTypes).forEach(function(e){var t=contentTypes[e];o.addProperty(e,function(){var o=getHeader(this._obj,\"content-type\");this.assert(o&&o.indexOf(t)>=0,\"expected the response type to be #{exp} but got #{act}\",\"expected the response type to not be #{exp} (#{act})\",e,o||\"<content-type-not-set>\")})}),o.addProperty(\"redirect\",function(){var e=this._obj.status;this.assert(wasRedirected(this._obj),\"expected redirect status code but got \"+e,\"expected not to redirect but got \"+e+\" status\")}),o.addMethod(\"redirectTo\",function(e){var t=this._obj.redirects,o=wasRedirected(this._obj),a=this._obj.status,s=getHeader(this._obj,\"location\");t&&t.length?this.assert(t.indexOf(e)>-1,\"expected redirect to \"+e+\" but got \"+t.join(\" then \"),\"expected not to redirect to \"+e+\" but got \"+t.join(\" then \")):this.assert(o&&s===e,\"expected redirect to #{exp} but got #{act}\",\"expected not to redirect to #{exp}\",e,o?s:a)}),o.addProperty(\"params\",function(){var e=url.parse(this._obj.url,!0).query;this.assert(Object.keys(e).length>0,\"expected the request to have query parameters\",\"expected the request to not have any query parameters\")}),o.addMethod(\"param\",function(e,t){var o=url.parse(this._obj.url,!0).query[e],a=void 0!==o&&null!==o;arguments.length<2?this.assert(a,\"expected query parameter #{exp} to exist\",\"expected query parameter #{exp} to not exist\",e,o):t instanceof RegExp?this.assert(a&&t.test(o),\"expected query parameter '\"+e+\"' to match #{exp} but got #{act}\",\"expected query parameter '\"+e+\"' to not match #{exp} but got #{act}\",t,a?o:\"<parameter-does-not-exist>\"):this.assert(a&&o===t,\"expected query parameter '\"+e+\"' to have value #{exp} but got #{act}\",\"expected query parameter '\"+e+\"' to not have value #{exp}\",t,a?o:\"<parameter-does-not-exist>\")}),o.addProperty(\"cookies\",function(){var e=this._obj.method?\"request\":\"response\",t=getCookies(this._obj);this.assert(t.length>0,\"expected the \"+e+\" to have cookies\",\"expected the \"+e+\" to not have any cookies\")}),o.addMethod(\"cookie\",function(e,t){var o=getCookie(this._obj,e)||{},a=void 0!==o.value&&null!==o.value;arguments.length<2?this.assert(a,\"expected cookie #{exp} to exist\",\"expected cookie #{exp} to not exist\",e,o.value):t instanceof RegExp?this.assert(a&&t.test(o.value),\"expected cookie '\"+e+\"' to match #{exp} but got #{act}\",\"expected cookie '\"+e+\"' to not match #{exp} but got #{act}\",t,a?o.value:\"<cookie-not-set>\"):this.assert(a&&o.value===t,\"expected cookie '\"+e+\"' to have value #{exp} but got #{act}\",\"expected cookie '\"+e+\"' to not have value #{exp}\",t,a?o.value:\"<cookie-not-set>\")}),e.Assertion.addMethod(\"schema\",function(e){var o=tv4.validate(this._obj,e),a=t.flag(this,\"negate\");if(o&&a||!o&&!a){var s=tv4.error.dataPath,r=tv4.error.schemaPath,i=tv4.error.message;if(s)i=s.substr(1).split(\"/\").join(\".\")+\" is invalid. \"+i;var n=new SyntaxError(i);throw n.dataPath=s,n.schemaPath=r,n}})}function getHeader(e,t){if(e.getHeader)return e.getHeader(t);t=(t||\"\").toLowerCase();for(var o=Object.keys(e.headers),a=0;a<o.length;a++)if(o[a].toLowerCase()===t)return e.headers[o[a]]}function getCookies(e){if(e.cookies)return e.cookies;var t=getHeader(e,\"cookie\");return cookies.parseRequestCookies(t)}function getCookie(e,t){if(e.getCookie)return e.getCookie(t);var o=getCookies(e);return cookies.getCookie(o,t)}function wasRedirected(e){var t=e.redirects,o=e.status;return[301,302,303,307,308].indexOf(o)>=0||t&&t.length}module.exports=chaiHttp},{\"./cookies\":3,url:54}],2:[function(require,module,exports){\"use strict\";var Runnable=require(\"./runnable\"),Hook=require(\"./hook\"),State=require(\"./state\");function PostmanBDD(){var t=this.state=new State;this.hooks={before:new Hook(\"before\",t),after:new Hook(\"after\",t),beforeEach:new Hook(\"beforeEach\",t),afterEach:new Hook(\"afterEach\",t)},this.before=PostmanBDD.prototype.before.bind(this),this.after=PostmanBDD.prototype.after.bind(this),this.beforeEach=PostmanBDD.prototype.beforeEach.bind(this),this.afterEach=PostmanBDD.prototype.afterEach.bind(this),this.describe=PostmanBDD.prototype.describe.bind(this),this.it=PostmanBDD.prototype.it.bind(this)}module.exports=PostmanBDD,PostmanBDD.prototype.before=function(t,e){this.hooks.before.push(t,e)},PostmanBDD.prototype.after=function(t,e){this.hooks.after.push(t,e)},PostmanBDD.prototype.beforeEach=function(t,e){this.hooks.beforeEach.push(t,e)},PostmanBDD.prototype.afterEach=function(t,e){this.hooks.afterEach.push(t,e)},PostmanBDD.prototype.describe=function(t,e){var o=new Runnable(\"describe\",this.state,t,e);return this.state.stack.push(o),this.oneTimeInitialization(),o.run(),this.state.isFinished()&&this.hooks.after.run(),this.state.stack.pop(),this.state.results},PostmanBDD.prototype.it=function(t,e){var o=new Runnable(\"it\",this.state,t,e);return this.state.stack.push(o),this.oneTimeInitialization(),this.hooks.beforeEach.run(),o.run(),this.hooks.afterEach.run(),this.state.stack.pop(),o.result},PostmanBDD.prototype.oneTimeInitialization=function(){this.state.isStarted()||this.hooks.before.run()}},{\"./hook\":4,\"./runnable\":9,\"./state\":10}],3:[function(require,module,exports){\"use strict\";var CookieJar=require(\"cookiejar\").CookieJar,CookieAccessInfo=require(\"cookiejar\").CookieAccessInfo;module.exports={getCookie:function(e,o){return o=(o||\"\").toLowerCase(),e.find(function(e){return e&&e.name.toLowerCase()===o})},parseRequestCookies:function(e){var o=new CookieJar;if(e){var r=e.split(\";\").map(function(e){return e.trim()});o.setCookies(r)}return o.getCookies(CookieAccessInfo.All)},parseResponseCookies:function(e){var o=new CookieJar;return e&&o.setCookies(e),o.getCookies(CookieAccessInfo.All)}}},{cookiejar:46}],4:[function(require,module,exports){\"use strict\";var Runnable=require(\"./runnable\");function Hook(t,s){this.type=t,this.state=s,this.runnables=[]}module.exports=Hook,Hook.prototype.run=function(){var t=this;this.state.inAHook()||this.runnables.forEach(function(s){t.state.stack.push(s),s.run(),t.state.stack.pop()})},Hook.prototype.push=function(t,s){var n=new Runnable(this.type,this.state,t,s);n.isHook=!0,this.runnables.push(n)}},{\"./runnable\":9}],5:[function(require,module,exports){var PostmanBDD=require(\"./bdd\"),superAgent=require(\"./response\"),assertions=require(\"./assertions\"),options=require(\"./options\"),log=require(\"./log\");function initPostmanBDD(){log.info(\"Using Postman BDD\"),initBDD(),initSuperAgent(),initChai()}function initBDD(){var e=new PostmanBDD;before=e.before,after=e.after,beforeEach=e.beforeEach,afterEach=e.afterEach,describe=e.describe,it=e.it}function initSuperAgent(){response=new superAgent.Response}function initChai(){chai=require(\"chai\"),assert=chai.assert,expect=chai.expect,chai.should(),chai.use(assertions)}module.exports=options,module.exports.reset=initPostmanBDD,initPostmanBDD()},{\"./assertions\":1,\"./bdd\":2,\"./log\":6,\"./options\":7,\"./response\":8,chai:13}],6:[function(require,module,exports){\"use strict\";var options=require(\"./options\"),levels=[\"silent\",\"error\",\"warn\",\"info\",\"debug\"],log=module.exports={isEnabled:function(e){return levels.indexOf(options.logLevel)>=levels.indexOf(e)},errorToPOJO:function(e){if(e&&\"object\"==typeof e)return Object.keys(e).concat([\"name\",\"message\",\"stack\"]).reduce(function(o,n){return o[n]=e[n],o},{})}};levels.forEach(function(e){log[e]=function(){if(this.isEnabled(e)){var o=console.log;\"function\"==typeof console[e]&&(o=console[e]),o.apply(console,arguments)}}})},{\"./options\":7}],7:[function(require,module,exports){\"use strict\";module.exports={logLevel:\"warn\"}},{}],8:[function(require,module,exports){\"use strict\";var log=require(\"./log\"),cookies=require(\"./cookies\");function Response(){this.status=\"object\"==typeof responseCode?responseCode.code:0,this.statusType=Math.floor(this.status/100),this.info=1===this.statusType,this.ok=2===this.statusType,this.redirect=3===this.statusType,this.clientError=4===this.statusType,this.serverError=5===this.statusType,this.error=this.clientError||this.serverError,this.accepted=202===this.status,this.noContent=204===this.status||1223===this.status,this.badRequest=400===this.status,this.unauthorized=401===this.status,this.notAcceptable=406===this.status,this.notFound=404===this.status,this.forbidden=403===this.status,this.time=\"number\"==typeof responseTime?responseTime:0,this.headers=this.header=parseHeaders();var e=this.getHeader(\"content-type\")||\"\",s=/charset=([a-zA-Z0-9_-]+)/i.exec(e);this.type=e.split(\";\")[0],this.charset=s?s[1]:\"\",this.cookies=parseCookies(this),this.text=\"string\"==typeof responseBody?responseBody:\"\",this.body=parseResponeBody(this)}function parseHeaders(){if(\"object\"==typeof responseHeaders){var e=pojo(responseHeaders),s={};return Object.keys(e).forEach(function(t){s[t.toLowerCase()]=e[t]}),s}return{}}function parseCookies(e){if(\"object\"==typeof responseCookies&&responseCookies.length>0)return responseCookies;var s=e.getHeader(\"set-cookie\");return cookies.parseResponseCookies(s)}function parseResponeBody(e){if(e.type.indexOf(\"json\")>=0)try{return JSON.parse(e.text)}catch(e){log.error(\"Unable to parse the response body as JSON\",log.errorToPOJO(e))}if(e.type.indexOf(\"xml\")>=0)try{return pojo(xml2Json(e.text))}catch(e){log.error(\"Unable to parse the response body as XML\",log.errorToPOJO(e))}return e.text}function pojo(e){return JSON.parse(JSON.stringify(e))}module.exports={Response:Response},Response.prototype.getHeader=function(e){return\"object\"==typeof postman&&\"function\"==typeof postman.getResponseHeader?postman.getResponseHeader(e):(e=(e||\"\").toLowerCase(),this.headers[e])},Response.prototype.getCookie=function(e){return\"object\"==typeof postman&&\"function\"==typeof postman.getResponseCookie?postman.getResponseCookie(e):cookies.getCookie(this.cookies,e)}},{\"./cookies\":3,\"./log\":6}],9:[function(require,module,exports){\"use strict\";var log=require(\"./log\");function Runnable(t,s,e,i){\"function\"==typeof e&&(i=e,e=\"\"),s.counters[t]++;var r=\"it\"===t?\"test\":t;this.type=t,this.state=s,this.isHook=!1,this.isNamed=!!e,this.title=e||r+\" #\"+s.counters[t],this.fn=i,this.result=null,this.error=null}module.exports=Runnable,Runnable.prototype.run=function(){var t=this.state.currentPath();log.debug(\"Running \"+t),\"describe\"!==this.type&&(this.state.results[t]=null);try{this.fn(),this.success(t)}catch(s){this.failure(s,t)}},Runnable.prototype.success=function(t){log.info(\"passed: \"+t),this.result=!0,\"describe\"!==this.type&&(this.state.results[t]=!0)},Runnable.prototype.failure=function(t,s){log.error(\"failed: \"+s,log.errorToPOJO(t)),this.result=!1,this.error=t,delete this.state.results[s],this.state.results[s+\" (\"+t.message+\")\"]=!1}},{\"./log\":6}],10:[function(require,module,exports){\"use strict\";function State(){this.results=resetTests(),this.stack=[],this.counters={describe:0,it:0,before:0,after:0,beforeEach:0,afterEach:0},this._pathCounter=0}function resetTests(){if(\"object\"!=typeof tests)throw new Error('Postman BDD can only run inside the Postman scripting runtime (the \"tests\" global variable is missing)');return Object.keys(tests).forEach(function(t){delete tests[t]}),tests}module.exports=State,State.prototype.currentPath=function(){var t=this.stack[this.stack.length-1],e=\"\";if((\"describe\"!==t.type&&(e=++this._pathCounter+\". \"),\"before\"===t.type||\"after\"===t.type)&&!this.stack.some(function(t){return\"describe\"===t.type&&t.isNamed}))return e+t.title;return e+=this.stack.map(function(t){return t.title}).join(\" - \")},State.prototype.isStarted=function(){return this._pathCounter>0},State.prototype.isFinished=function(){return 1===this.stack.length&&this.counters.describe>0},State.prototype.inAHook=function(){return this.stack.some(function(t){return t.isHook})}},{}],11:[function(require,module,exports){\n/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\nfunction exclude(){var r=[].slice.call(arguments);function t(t,o){Object.keys(o).forEach(function(e){~r.indexOf(e)||(t[e]=o[e])})}return function(){for(var r=[].slice.call(arguments),o=0,e={};o<r.length;o++)t(e,r[o]);return e}}function AssertionError(r,t,o){var e=exclude(\"name\",\"message\",\"stack\",\"constructor\",\"toJSON\")(t||{});for(var s in this.message=r||\"Unspecified AssertionError\",this.showDiff=!1,e)this[s]=e[s];if(o=o||AssertionError,Error.captureStackTrace)Error.captureStackTrace(this,o);else try{throw new Error}catch(r){this.stack=r.stack}}\n/*!\n * Inherit from Error.prototype\n */\n/*!\n * Primary Exports\n */module.exports=AssertionError,AssertionError.prototype=Object.create(Error.prototype),\n/*!\n * Statically set name\n */\nAssertionError.prototype.name=\"AssertionError\",\n/*!\n * Ensure correct constructor\n */\nAssertionError.prototype.constructor=AssertionError,AssertionError.prototype.toJSON=function(r){var t=exclude(\"constructor\",\"toJSON\",\"stack\")({name:this.name},this);return!1!==r&&this.stack&&(t.stack=this.stack),t}},{}],12:[function(require,module,exports){(function(global){\n/*! https://mths.be/punycode v1.4.1 by @mathias */\n!function(e){var o=\"object\"==typeof exports&&exports&&!exports.nodeType&&exports,n=\"object\"==typeof module&&module&&!module.nodeType&&module,t=\"object\"==typeof global&&global;t.global!==t&&t.window!==t&&t.self!==t||(e=t);var r,u,i=2147483647,f=36,c=1,l=26,s=38,d=700,p=72,a=128,h=\"-\",v=/^xn--/,g=/[^\\x20-\\x7E]/,w=/[\\x2E\\u3002\\uFF0E\\uFF61]/g,x={overflow:\"Overflow: input needs wider integers to process\",\"not-basic\":\"Illegal input >= 0x80 (not a basic code point)\",\"invalid-input\":\"Invalid input\"},b=f-c,y=Math.floor,C=String.fromCharCode;function m(e){throw new RangeError(x[e])}function j(e,o){for(var n=e.length,t=[];n--;)t[n]=o(e[n]);return t}function A(e,o){var n=e.split(\"@\"),t=\"\";return n.length>1&&(t=n[0]+\"@\",e=n[1]),t+j((e=e.replace(w,\".\")).split(\".\"),o).join(\".\")}function I(e){for(var o,n,t=[],r=0,u=e.length;r<u;)(o=e.charCodeAt(r++))>=55296&&o<=56319&&r<u?56320==(64512&(n=e.charCodeAt(r++)))?t.push(((1023&o)<<10)+(1023&n)+65536):(t.push(o),r--):t.push(o);return t}function E(e){return j(e,function(e){var o=\"\";return e>65535&&(o+=C((e-=65536)>>>10&1023|55296),e=56320|1023&e),o+=C(e)}).join(\"\")}function F(e,o){return e+22+75*(e<26)-((0!=o)<<5)}function O(e,o,n){var t=0;for(e=n?y(e/d):e>>1,e+=y(e/o);e>b*l>>1;t+=f)e=y(e/b);return y(t+(b+1)*e/(e+s))}function S(e){var o,n,t,r,u,s,d,v,g,w,x,b=[],C=e.length,j=0,A=a,I=p;for((n=e.lastIndexOf(h))<0&&(n=0),t=0;t<n;++t)e.charCodeAt(t)>=128&&m(\"not-basic\"),b.push(e.charCodeAt(t));for(r=n>0?n+1:0;r<C;){for(u=j,s=1,d=f;r>=C&&m(\"invalid-input\"),((v=(x=e.charCodeAt(r++))-48<10?x-22:x-65<26?x-65:x-97<26?x-97:f)>=f||v>y((i-j)/s))&&m(\"overflow\"),j+=v*s,!(v<(g=d<=I?c:d>=I+l?l:d-I));d+=f)s>y(i/(w=f-g))&&m(\"overflow\"),s*=w;I=O(j-u,o=b.length+1,0==u),y(j/o)>i-A&&m(\"overflow\"),A+=y(j/o),j%=o,b.splice(j++,0,A)}return E(b)}function T(e){var o,n,t,r,u,s,d,v,g,w,x,b,j,A,E,S=[];for(b=(e=I(e)).length,o=a,n=0,u=p,s=0;s<b;++s)(x=e[s])<128&&S.push(C(x));for(t=r=S.length,r&&S.push(h);t<b;){for(d=i,s=0;s<b;++s)(x=e[s])>=o&&x<d&&(d=x);for(d-o>y((i-n)/(j=t+1))&&m(\"overflow\"),n+=(d-o)*j,o=d,s=0;s<b;++s)if((x=e[s])<o&&++n>i&&m(\"overflow\"),x==o){for(v=n,g=f;!(v<(w=g<=u?c:g>=u+l?l:g-u));g+=f)E=v-w,A=f-w,S.push(C(F(w+E%A,0))),v=y(E/A);S.push(C(F(v,0))),u=O(n,j,t==r),n=0,++t}++n,++o}return S.join(\"\")}if(r={version:\"1.4.1\",ucs2:{decode:I,encode:E},decode:S,encode:T,toASCII:function(e){return A(e,function(e){return g.test(e)?\"xn--\"+T(e):e})},toUnicode:function(e){return A(e,function(e){return v.test(e)?S(e.slice(4).toLowerCase()):e})}},\"function\"==typeof define&&\"object\"==typeof define.amd&&define.amd)define(\"punycode\",function(){return r});else if(o&&n)if(module.exports==o)n.exports=r;else for(u in r)r.hasOwnProperty(u)&&(o[u]=r[u]);else e.punycode=r}(this)}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{})},{}],13:[function(require,module,exports){module.exports=require(\"./lib/chai\")},{\"./lib/chai\":14}],14:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar used=[];\n/*!\n * Chai version\n */exports.version=\"4.1.2\",\n/*!\n * Assertion Error\n */\nexports.AssertionError=require(\"assertion-error\");\n/*!\n * Utils for plugins (not exported)\n */var util=require(\"./chai/utils\");exports.use=function(e){return~used.indexOf(e)||(e(exports,util),used.push(e)),exports\n/*!\n * Utility Functions\n */},exports.util=util;\n/*!\n * Configuration\n */var config=require(\"./chai/config\");exports.config=config;\n/*!\n * Primary `Assertion` prototype\n */var assertion=require(\"./chai/assertion\");exports.use(assertion);\n/*!\n * Core Assertions\n */var core=require(\"./chai/core/assertions\");exports.use(core);\n/*!\n * Expect interface\n */var expect=require(\"./chai/interface/expect\");exports.use(expect);\n/*!\n * Should interface\n */var should=require(\"./chai/interface/should\");exports.use(should);\n/*!\n * Assert interface\n */var assert=require(\"./chai/interface/assert\");exports.use(assert)},{\"./chai/assertion\":15,\"./chai/config\":16,\"./chai/core/assertions\":17,\"./chai/interface/assert\":18,\"./chai/interface/expect\":19,\"./chai/interface/should\":20,\"./chai/utils\":34,\"assertion-error\":11}],15:[function(require,module,exports){\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar config=require(\"./config\");module.exports=function(t,e){\n/*!\n   * Module dependencies.\n   */\nvar i=t.AssertionError,o=e.flag;\n/*!\n   * Module export.\n   */\n/*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */function n(t,i,s,r){return o(this,\"ssfi\",s||n),o(this,\"lockSsfi\",r),o(this,\"object\",t),o(this,\"message\",i),e.proxify(this)}t.Assertion=n,Object.defineProperty(n,\"includeStack\",{get:function(){return console.warn(\"Assertion.includeStack is deprecated, use chai.config.includeStack instead.\"),config.includeStack},set:function(t){console.warn(\"Assertion.includeStack is deprecated, use chai.config.includeStack instead.\"),config.includeStack=t}}),Object.defineProperty(n,\"showDiff\",{get:function(){return console.warn(\"Assertion.showDiff is deprecated, use chai.config.showDiff instead.\"),config.showDiff},set:function(t){console.warn(\"Assertion.showDiff is deprecated, use chai.config.showDiff instead.\"),config.showDiff=t}}),n.addProperty=function(t,i){e.addProperty(this.prototype,t,i)},n.addMethod=function(t,i){e.addMethod(this.prototype,t,i)},n.addChainableMethod=function(t,i,o){e.addChainableMethod(this.prototype,t,i,o)},n.overwriteProperty=function(t,i){e.overwriteProperty(this.prototype,t,i)},n.overwriteMethod=function(t,i){e.overwriteMethod(this.prototype,t,i)},n.overwriteChainableMethod=function(t,i,o){e.overwriteChainableMethod(this.prototype,t,i,o)},n.prototype.assert=function(t,n,s,r,c,f){var a=e.test(this,arguments);if(!1!==f&&(f=!0),void 0===r&&void 0===c&&(f=!1),!0!==config.showDiff&&(f=!1),!a){n=e.getMessage(this,arguments);var d=e.getActual(this,arguments);throw new i(n,{actual:d,expected:r,showDiff:f},config.includeStack?this.assert:o(this,\"ssfi\"))}},\n/*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\nObject.defineProperty(n.prototype,\"_obj\",{get:function(){return o(this,\"object\")},set:function(t){o(this,\"object\",t)}})}},{\"./config\":16}],16:[function(require,module,exports){module.exports={includeStack:!1,showDiff:!0,truncateThreshold:40,useProxy:!0,proxyExcludedKeys:[\"then\",\"inspect\",\"toJSON\"]}},{}],17:[function(require,module,exports){\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(e,t){var s=e.Assertion,o=e.AssertionError,a=t.flag;function i(e,s){s&&a(this,\"message\",s),e=e.toLowerCase();var o=a(this,\"object\"),i=~[\"a\",\"e\",\"i\",\"o\",\"u\"].indexOf(e.charAt(0))?\"an \":\"a \";this.assert(e===t.type(o).toLowerCase(),\"expected #{this} to be \"+i+e,\"expected #{this} not to be \"+i+e)}function r(e,s){return t.isNaN(e)&&t.isNaN(s)||e===s}function n(){a(this,\"contains\",!0)}function h(e,i){i&&a(this,\"message\",i);var n=a(this,\"object\"),h=t.type(n).toLowerCase(),d=a(this,\"message\"),c=a(this,\"negate\"),p=a(this,\"ssfi\"),l=a(this,\"deep\"),u=l?\"deep \":\"\";d=d?d+\": \":\"\";var b=!1;switch(h){case\"string\":b=-1!==n.indexOf(e);break;case\"weakset\":if(l)throw new o(d+\"unable to use .deep.include with WeakSet\",void 0,p);b=n.has(e);break;case\"map\":var f=l?t.eql:r;n.forEach(function(t){b=b||f(t,e)});break;case\"set\":l?n.forEach(function(s){b=b||t.eql(s,e)}):b=n.has(e);break;case\"array\":b=l?n.some(function(s){return t.eql(s,e)}):-1!==n.indexOf(e);break;default:if(e!==Object(e))throw new o(d+\"object tested must be an array, a map, an object, a set, a string, or a weakset, but \"+h+\" given\",void 0,p);var g=Object.keys(e),m=null,x=0;if(g.forEach(function(i){var r=new s(n);if(t.transferFlags(this,r,!0),a(r,\"lockSsfi\",!0),c&&1!==g.length)try{r.property(i,e[i])}catch(e){if(!t.checkError.compatibleConstructor(e,o))throw e;null===m&&(m=e),x++}else r.property(i,e[i])},this),c&&g.length>1&&x===g.length)throw m;return}this.assert(b,\"expected #{this} to \"+u+\"include \"+t.inspect(e),\"expected #{this} to not \"+u+\"include \"+t.inspect(e))}function d(){var e=a(this,\"object\"),s=t.type(e);this.assert(\"Arguments\"===s,\"expected #{this} to be arguments but got \"+s,\"expected #{this} to not be arguments\")}function c(e,t){t&&a(this,\"message\",t);var s=a(this,\"object\");if(a(this,\"deep\"))return this.eql(e);this.assert(e===s,\"expected #{this} to equal #{exp}\",\"expected #{this} to not equal #{exp}\",e,this._obj,!0)}function p(e,s){s&&a(this,\"message\",s),this.assert(t.eql(e,a(this,\"object\")),\"expected #{this} to deeply equal #{exp}\",\"expected #{this} to not deeply equal #{exp}\",e,this._obj,!0)}function l(e,i){i&&a(this,\"message\",i);var r=a(this,\"object\"),n=a(this,\"doLength\"),h=a(this,\"message\"),d=h?h+\": \":\"\",c=a(this,\"ssfi\"),p=t.type(r).toLowerCase(),l=t.type(e).toLowerCase(),u=!0;if(n&&new s(r,h,c,!0).to.have.property(\"length\"),n||\"date\"!==p||\"date\"===l)if(\"number\"===l||!n&&\"number\"!==p)if(n||\"date\"===p||\"number\"===p)u=!1;else{errorMessage=d+\"expected \"+(\"string\"===p?\"'\"+r+\"'\":r)+\" to be a number or a date\"}else errorMessage=d+\"the argument to above must be a number\";else errorMessage=d+\"the argument to above must be a date\";if(u)throw new o(errorMessage,void 0,c);if(n){var b=r.length;this.assert(b>e,\"expected #{this} to have a length above #{exp} but got #{act}\",\"expected #{this} to not have a length above #{exp}\",e,b)}else this.assert(r>e,\"expected #{this} to be above #{exp}\",\"expected #{this} to be at most #{exp}\",e)}function u(e,i){i&&a(this,\"message\",i);var r=a(this,\"object\"),n=a(this,\"doLength\"),h=a(this,\"message\"),d=h?h+\": \":\"\",c=a(this,\"ssfi\"),p=t.type(r).toLowerCase(),l=t.type(e).toLowerCase(),u=!0;if(n&&new s(r,h,c,!0).to.have.property(\"length\"),n||\"date\"!==p||\"date\"===l)if(\"number\"===l||!n&&\"number\"!==p)if(n||\"date\"===p||\"number\"===p)u=!1;else{errorMessage=d+\"expected \"+(\"string\"===p?\"'\"+r+\"'\":r)+\" to be a number or a date\"}else errorMessage=d+\"the argument to least must be a number\";else errorMessage=d+\"the argument to least must be a date\";if(u)throw new o(errorMessage,void 0,c);if(n){var b=r.length;this.assert(b>=e,\"expected #{this} to have a length at least #{exp} but got #{act}\",\"expected #{this} to have a length below #{exp}\",e,b)}else this.assert(r>=e,\"expected #{this} to be at least #{exp}\",\"expected #{this} to be below #{exp}\",e)}function b(e,i){i&&a(this,\"message\",i);var r=a(this,\"object\"),n=a(this,\"doLength\"),h=a(this,\"message\"),d=h?h+\": \":\"\",c=a(this,\"ssfi\"),p=t.type(r).toLowerCase(),l=t.type(e).toLowerCase(),u=!0;if(n&&new s(r,h,c,!0).to.have.property(\"length\"),n||\"date\"!==p||\"date\"===l)if(\"number\"===l||!n&&\"number\"!==p)if(n||\"date\"===p||\"number\"===p)u=!1;else{errorMessage=d+\"expected \"+(\"string\"===p?\"'\"+r+\"'\":r)+\" to be a number or a date\"}else errorMessage=d+\"the argument to below must be a number\";else errorMessage=d+\"the argument to below must be a date\";if(u)throw new o(errorMessage,void 0,c);if(n){var b=r.length;this.assert(b<e,\"expected #{this} to have a length below #{exp} but got #{act}\",\"expected #{this} to not have a length below #{exp}\",e,b)}else this.assert(r<e,\"expected #{this} to be below #{exp}\",\"expected #{this} to be at least #{exp}\",e)}function f(e,i){i&&a(this,\"message\",i);var r=a(this,\"object\"),n=a(this,\"doLength\"),h=a(this,\"message\"),d=h?h+\": \":\"\",c=a(this,\"ssfi\"),p=t.type(r).toLowerCase(),l=t.type(e).toLowerCase(),u=!0;if(n&&new s(r,h,c,!0).to.have.property(\"length\"),n||\"date\"!==p||\"date\"===l)if(\"number\"===l||!n&&\"number\"!==p)if(n||\"date\"===p||\"number\"===p)u=!1;else{errorMessage=d+\"expected \"+(\"string\"===p?\"'\"+r+\"'\":r)+\" to be a number or a date\"}else errorMessage=d+\"the argument to most must be a number\";else errorMessage=d+\"the argument to most must be a date\";if(u)throw new o(errorMessage,void 0,c);if(n){var b=r.length;this.assert(b<=e,\"expected #{this} to have a length at most #{exp} but got #{act}\",\"expected #{this} to have a length above #{exp}\",e,b)}else this.assert(r<=e,\"expected #{this} to be at most #{exp}\",\"expected #{this} to be above #{exp}\",e)}function g(e,s){s&&a(this,\"message\",s);var i=a(this,\"object\"),r=a(this,\"ssfi\"),n=a(this,\"message\");try{var h=i instanceof e}catch(s){if(s instanceof TypeError)throw new o((n=n?n+\": \":\"\")+\"The instanceof assertion needs a constructor but \"+t.type(e)+\" was given.\",void 0,r);throw s}var d=t.getName(e);null===d&&(d=\"an unnamed constructor\"),this.assert(h,\"expected #{this} to be an instance of \"+d,\"expected #{this} to not be an instance of \"+d)}function m(e,s,i){i&&a(this,\"message\",i);var r=a(this,\"nested\"),n=a(this,\"own\"),h=a(this,\"message\"),d=a(this,\"object\"),c=a(this,\"ssfi\");if(r&&n)throw new o((h=h?h+\": \":\"\")+'The \"nested\" and \"own\" flags cannot be combined.',void 0,c);if(null===d||void 0===d)throw new o((h=h?h+\": \":\"\")+\"Target cannot be null or undefined.\",void 0,c);var p,l=a(this,\"deep\"),u=a(this,\"negate\"),b=r?t.getPathInfo(d,e):null,f=r?b.value:d[e],g=\"\";l&&(g+=\"deep \"),n&&(g+=\"own \"),r&&(g+=\"nested \"),g+=\"property \",p=n?Object.prototype.hasOwnProperty.call(d,e):r?b.exists:t.hasProperty(d,e),u&&1!==arguments.length||this.assert(p,\"expected #{this} to have \"+g+t.inspect(e),\"expected #{this} to not have \"+g+t.inspect(e)),arguments.length>1&&this.assert(p&&(l?t.eql(s,f):s===f),\"expected #{this} to have \"+g+t.inspect(e)+\" of #{exp}, but got #{act}\",\"expected #{this} to not have \"+g+t.inspect(e)+\" of #{act}\",s,f),a(this,\"object\",f)}function x(e,t,s){a(this,\"own\",!0),m.apply(this,arguments)}function w(e,s,o){\"string\"==typeof s&&(o=s,s=null),o&&a(this,\"message\",o);var i=a(this,\"object\"),r=Object.getOwnPropertyDescriptor(Object(i),e);r&&s?this.assert(t.eql(s,r),\"expected the own property descriptor for \"+t.inspect(e)+\" on #{this} to match \"+t.inspect(s)+\", got \"+t.inspect(r),\"expected the own property descriptor for \"+t.inspect(e)+\" on #{this} to not match \"+t.inspect(s),s,r,!0):this.assert(r,\"expected #{this} to have an own property descriptor for \"+t.inspect(e),\"expected #{this} to not have an own property descriptor for \"+t.inspect(e)),a(this,\"object\",r)}function v(){a(this,\"doLength\",!0)}function y(e,t){t&&a(this,\"message\",t);var o=a(this,\"object\"),i=a(this,\"message\"),r=a(this,\"ssfi\");new s(o,i,r,!0).to.have.property(\"length\");var n=o.length;this.assert(n==e,\"expected #{this} to have a length of #{exp} but got #{act}\",\"expected #{this} to not have a length of #{act}\",e,n)}function M(e,t){t&&a(this,\"message\",t);var s=a(this,\"object\");this.assert(e.exec(s),\"expected #{this} to match \"+e,\"expected #{this} not to match \"+e)}function j(e){var s,i=a(this,\"object\"),r=t.type(i),n=t.type(e),h=a(this,\"ssfi\"),d=a(this,\"deep\"),c=\"\",p=!0,l=a(this,\"message\"),u=(l=l?l+\": \":\"\")+\"when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments\";if(\"Map\"===r||\"Set\"===r)c=d?\"deeply \":\"\",b=[],i.forEach(function(e,t){b.push(t)}),\"Array\"!==n&&(e=Array.prototype.slice.call(arguments));else{switch(b=t.getOwnEnumerableProperties(i),n){case\"Array\":if(arguments.length>1)throw new o(u,void 0,h);break;case\"Object\":if(arguments.length>1)throw new o(u,void 0,h);e=Object.keys(e);break;default:e=Array.prototype.slice.call(arguments)}e=e.map(function(e){return\"symbol\"==typeof e?e:String(e)})}if(!e.length)throw new o(l+\"keys required\",void 0,h);var b,f=e.length,g=a(this,\"any\"),m=a(this,\"all\"),x=e;if(g||m||(m=!0),g&&(p=x.some(function(e){return b.some(function(s){return d?t.eql(e,s):e===s})})),m&&(p=x.every(function(e){return b.some(function(s){return d?t.eql(e,s):e===s})}),a(this,\"contains\")||(p=p&&e.length==b.length)),f>1){var w=(e=e.map(function(e){return t.inspect(e)})).pop();m&&(s=e.join(\", \")+\", and \"+w),g&&(s=e.join(\", \")+\", or \"+w)}else s=t.inspect(e[0]);s=(f>1?\"keys \":\"key \")+s,s=(a(this,\"contains\")?\"contain \":\"have \")+s,this.assert(p,\"expected #{this} to \"+c+s,\"expected #{this} to not \"+c+s,x.slice(0).sort(t.compareByInspect),b.sort(t.compareByInspect),!0)}function k(e,o,i){i&&a(this,\"message\",i);var r,n=a(this,\"object\"),h=a(this,\"ssfi\"),d=a(this,\"message\"),c=a(this,\"negate\")||!1;new s(n,d,h,!0).is.a(\"function\"),(e instanceof RegExp||\"string\"==typeof e)&&(o=e,e=null);try{n()}catch(e){r=e}var p=void 0===e&&void 0===o,l=Boolean(e&&o),u=!1,b=!1;if(p||!p&&!c){var f=\"an error\";e instanceof Error?f=\"#{exp}\":e&&(f=t.checkError.getConstructorName(e)),this.assert(r,\"expected #{this} to throw \"+f,\"expected #{this} to not throw an error but #{act} was thrown\",e&&e.toString(),r instanceof Error?r.toString():\"string\"==typeof r?r:r&&t.checkError.getConstructorName(r))}if(e&&r){if(e instanceof Error)t.checkError.compatibleInstance(r,e)===c&&(l&&c?u=!0:this.assert(c,\"expected #{this} to throw #{exp} but #{act} was thrown\",\"expected #{this} to not throw #{exp}\"+(r&&!c?\" but #{act} was thrown\":\"\"),e.toString(),r.toString()));t.checkError.compatibleConstructor(r,e)===c&&(l&&c?u=!0:this.assert(c,\"expected #{this} to throw #{exp} but #{act} was thrown\",\"expected #{this} to not throw #{exp}\"+(r?\" but #{act} was thrown\":\"\"),e instanceof Error?e.toString():e&&t.checkError.getConstructorName(e),r instanceof Error?r.toString():r&&t.checkError.getConstructorName(r)))}if(r&&void 0!==o&&null!==o){var g=\"including\";o instanceof RegExp&&(g=\"matching\"),t.checkError.compatibleMessage(r,o)===c&&(l&&c?b=!0:this.assert(c,\"expected #{this} to throw error \"+g+\" #{exp} but got #{act}\",\"expected #{this} to throw error not \"+g+\" #{exp}\",o,t.checkError.getMessage(r)))}u&&b&&this.assert(c,\"expected #{this} to throw #{exp} but #{act} was thrown\",\"expected #{this} to not throw #{exp}\"+(r?\" but #{act} was thrown\":\"\"),e instanceof Error?e.toString():e&&t.checkError.getConstructorName(e),r instanceof Error?r.toString():r&&t.checkError.getConstructorName(r)),a(this,\"object\",r)}function O(e,s){s&&a(this,\"message\",s);var o=a(this,\"object\"),i=a(this,\"itself\"),r=\"function\"!=typeof o||i?o[e]:o.prototype[e];this.assert(\"function\"==typeof r,\"expected #{this} to respond to \"+t.inspect(e),\"expected #{this} to not respond to \"+t.inspect(e))}function C(e,s){s&&a(this,\"message\",s);var o=e(a(this,\"object\"));this.assert(o,\"expected #{this} to satisfy \"+t.objDisplay(e),\"expected #{this} to not satisfy\"+t.objDisplay(e),!a(this,\"negate\"),o)}function P(e,t,i){i&&a(this,\"message\",i);var r=a(this,\"object\"),n=a(this,\"message\"),h=a(this,\"ssfi\");if(new s(r,n,h,!0).is.a(\"number\"),\"number\"!=typeof e||\"number\"!=typeof t)throw new o((n=n?n+\": \":\"\")+\"the arguments to closeTo or approximately must be numbers\",void 0,h);this.assert(Math.abs(r-e)<=t,\"expected #{this} to be close to \"+e+\" +/- \"+t,\"expected #{this} not to be close to \"+e+\" +/- \"+t)}function E(e,t,o){o&&a(this,\"message\",o);var i,r=a(this,\"object\"),n=a(this,\"message\"),h=a(this,\"ssfi\");new s(r,n,h,!0).is.a(\"function\"),t?(new s(e,n,h,!0).to.have.property(t),i=e[t]):(new s(e,n,h,!0).is.a(\"function\"),i=e()),r();var d=void 0===t||null===t?e():e[t],c=void 0===t||null===t?i:\".\"+t;a(this,\"deltaMsgObj\",c),a(this,\"initialDeltaValue\",i),a(this,\"finalDeltaValue\",d),a(this,\"deltaBehavior\",\"change\"),a(this,\"realDelta\",d!==i),this.assert(i!==d,\"expected \"+c+\" to change\",\"expected \"+c+\" to not change\")}function L(e,t,o){o&&a(this,\"message\",o);var i,r=a(this,\"object\"),n=a(this,\"message\"),h=a(this,\"ssfi\");new s(r,n,h,!0).is.a(\"function\"),t?(new s(e,n,h,!0).to.have.property(t),i=e[t]):(new s(e,n,h,!0).is.a(\"function\"),i=e()),new s(i,n,h,!0).is.a(\"number\"),r();var d=void 0===t||null===t?e():e[t],c=void 0===t||null===t?i:\".\"+t;a(this,\"deltaMsgObj\",c),a(this,\"initialDeltaValue\",i),a(this,\"finalDeltaValue\",d),a(this,\"deltaBehavior\",\"increase\"),a(this,\"realDelta\",d-i),this.assert(d-i>0,\"expected \"+c+\" to increase\",\"expected \"+c+\" to not increase\")}function q(e,t,o){o&&a(this,\"message\",o);var i,r=a(this,\"object\"),n=a(this,\"message\"),h=a(this,\"ssfi\");new s(r,n,h,!0).is.a(\"function\"),t?(new s(e,n,h,!0).to.have.property(t),i=e[t]):(new s(e,n,h,!0).is.a(\"function\"),i=e()),new s(i,n,h,!0).is.a(\"number\"),r();var d=void 0===t||null===t?e():e[t],c=void 0===t||null===t?i:\".\"+t;a(this,\"deltaMsgObj\",c),a(this,\"initialDeltaValue\",i),a(this,\"finalDeltaValue\",d),a(this,\"deltaBehavior\",\"decrease\"),a(this,\"realDelta\",i-d),this.assert(d-i<0,\"expected \"+c+\" to decrease\",\"expected \"+c+\" to not decrease\")}[\"to\",\"be\",\"been\",\"is\",\"and\",\"has\",\"have\",\"with\",\"that\",\"which\",\"at\",\"of\",\"same\",\"but\",\"does\"].forEach(function(e){s.addProperty(e)}),s.addProperty(\"not\",function(){a(this,\"negate\",!0)}),s.addProperty(\"deep\",function(){a(this,\"deep\",!0)}),s.addProperty(\"nested\",function(){a(this,\"nested\",!0)}),s.addProperty(\"own\",function(){a(this,\"own\",!0)}),s.addProperty(\"ordered\",function(){a(this,\"ordered\",!0)}),s.addProperty(\"any\",function(){a(this,\"any\",!0),a(this,\"all\",!1)}),s.addProperty(\"all\",function(){a(this,\"all\",!0),a(this,\"any\",!1)}),s.addChainableMethod(\"an\",i),s.addChainableMethod(\"a\",i),s.addChainableMethod(\"include\",h,n),s.addChainableMethod(\"contain\",h,n),s.addChainableMethod(\"contains\",h,n),s.addChainableMethod(\"includes\",h,n),s.addProperty(\"ok\",function(){this.assert(a(this,\"object\"),\"expected #{this} to be truthy\",\"expected #{this} to be falsy\")}),s.addProperty(\"true\",function(){this.assert(!0===a(this,\"object\"),\"expected #{this} to be true\",\"expected #{this} to be false\",!a(this,\"negate\"))}),s.addProperty(\"false\",function(){this.assert(!1===a(this,\"object\"),\"expected #{this} to be false\",\"expected #{this} to be true\",!!a(this,\"negate\"))}),s.addProperty(\"null\",function(){this.assert(null===a(this,\"object\"),\"expected #{this} to be null\",\"expected #{this} not to be null\")}),s.addProperty(\"undefined\",function(){this.assert(void 0===a(this,\"object\"),\"expected #{this} to be undefined\",\"expected #{this} not to be undefined\")}),s.addProperty(\"NaN\",function(){this.assert(t.isNaN(a(this,\"object\")),\"expected #{this} to be NaN\",\"expected #{this} not to be NaN\")}),s.addProperty(\"exist\",function(){var e=a(this,\"object\");this.assert(null!==e&&void 0!==e,\"expected #{this} to exist\",\"expected #{this} to not exist\")}),s.addProperty(\"empty\",function(){var e,s=a(this,\"object\"),i=a(this,\"ssfi\"),r=a(this,\"message\");switch(r=r?r+\": \":\"\",t.type(s).toLowerCase()){case\"array\":case\"string\":e=s.length;break;case\"map\":case\"set\":e=s.size;break;case\"weakmap\":case\"weakset\":throw new o(r+\".empty was passed a weak collection\",void 0,i);case\"function\":var n=r+\".empty was passed a function \"+t.getName(s);throw new o(n.trim(),void 0,i);default:if(s!==Object(s))throw new o(r+\".empty was passed non-string primitive \"+t.inspect(s),void 0,i);e=Object.keys(s).length}this.assert(0===e,\"expected #{this} to be empty\",\"expected #{this} not to be empty\")}),s.addProperty(\"arguments\",d),s.addProperty(\"Arguments\",d),s.addMethod(\"equal\",c),s.addMethod(\"equals\",c),s.addMethod(\"eq\",c),s.addMethod(\"eql\",p),s.addMethod(\"eqls\",p),s.addMethod(\"above\",l),s.addMethod(\"gt\",l),s.addMethod(\"greaterThan\",l),s.addMethod(\"least\",u),s.addMethod(\"gte\",u),s.addMethod(\"below\",b),s.addMethod(\"lt\",b),s.addMethod(\"lessThan\",b),s.addMethod(\"most\",f),s.addMethod(\"lte\",f),s.addMethod(\"within\",function(e,i,r){r&&a(this,\"message\",r);var n=a(this,\"object\"),h=a(this,\"doLength\"),d=a(this,\"message\"),c=d?d+\": \":\"\",p=a(this,\"ssfi\"),l=t.type(n).toLowerCase(),u=t.type(e).toLowerCase(),b=t.type(i).toLowerCase(),f=!0,g=\"date\"===u&&\"date\"===b?e.toUTCString()+\"..\"+i.toUTCString():e+\"..\"+i;if(h&&new s(n,d,p,!0).to.have.property(\"length\"),h||\"date\"!==l||\"date\"===u&&\"date\"===b)if(\"number\"===u&&\"number\"===b||!h&&\"number\"!==l)if(h||\"date\"===l||\"number\"===l)f=!1;else{errorMessage=c+\"expected \"+(\"string\"===l?\"'\"+n+\"'\":n)+\" to be a number or a date\"}else errorMessage=c+\"the arguments to within must be numbers\";else errorMessage=c+\"the arguments to within must be dates\";if(f)throw new o(errorMessage,void 0,p);if(h){var m=n.length;this.assert(m>=e&&m<=i,\"expected #{this} to have a length within \"+g,\"expected #{this} to not have a length within \"+g)}else this.assert(n>=e&&n<=i,\"expected #{this} to be within \"+g,\"expected #{this} to not be within \"+g)}),s.addMethod(\"instanceof\",g),s.addMethod(\"instanceOf\",g),s.addMethod(\"property\",m),s.addMethod(\"ownProperty\",x),s.addMethod(\"haveOwnProperty\",x),s.addMethod(\"ownPropertyDescriptor\",w),s.addMethod(\"haveOwnPropertyDescriptor\",w),s.addChainableMethod(\"length\",y,v),s.addChainableMethod(\"lengthOf\",y,v),s.addMethod(\"match\",M),s.addMethod(\"matches\",M),s.addMethod(\"string\",function(e,o){o&&a(this,\"message\",o);var i=a(this,\"object\"),r=a(this,\"message\"),n=a(this,\"ssfi\");new s(i,r,n,!0).is.a(\"string\"),this.assert(~i.indexOf(e),\"expected #{this} to contain \"+t.inspect(e),\"expected #{this} to not contain \"+t.inspect(e))}),s.addMethod(\"keys\",j),s.addMethod(\"key\",j),s.addMethod(\"throw\",k),s.addMethod(\"throws\",k),s.addMethod(\"Throw\",k),s.addMethod(\"respondTo\",O),s.addMethod(\"respondsTo\",O),s.addProperty(\"itself\",function(){a(this,\"itself\",!0)}),s.addMethod(\"satisfy\",C),s.addMethod(\"satisfies\",C),s.addMethod(\"closeTo\",P),s.addMethod(\"approximately\",P),s.addMethod(\"members\",function(e,o){o&&a(this,\"message\",o);var i=a(this,\"object\"),r=a(this,\"message\"),n=a(this,\"ssfi\");new s(i,r,n,!0).to.be.an(\"array\"),new s(e,r,n,!0).to.be.an(\"array\");var h,d,c,p=a(this,\"contains\"),l=a(this,\"ordered\");p?(d=\"expected #{this} to be \"+(h=l?\"an ordered superset\":\"a superset\")+\" of #{exp}\",c=\"expected #{this} to not be \"+h+\" of #{exp}\"):(d=\"expected #{this} to have the same \"+(h=l?\"ordered members\":\"members\")+\" as #{exp}\",c=\"expected #{this} to not have the same \"+h+\" as #{exp}\");var u=a(this,\"deep\")?t.eql:void 0;this.assert(function(e,t,s,o,a){if(!o){if(e.length!==t.length)return!1;t=t.slice()}return e.every(function(e,i){if(a)return s?s(e,t[i]):e===t[i];if(!s){var r=t.indexOf(e);return-1!==r&&(o||t.splice(r,1),!0)}return t.some(function(a,i){return!!s(e,a)&&(o||t.splice(i,1),!0)})})}(e,i,u,p,l),d,c,e,i,!0)}),s.addMethod(\"oneOf\",function(e,t){t&&a(this,\"message\",t);var o=a(this,\"object\"),i=a(this,\"message\"),r=a(this,\"ssfi\");new s(e,i,r,!0).to.be.an(\"array\"),this.assert(e.indexOf(o)>-1,\"expected #{this} to be one of #{exp}\",\"expected #{this} to not be one of #{exp}\",e,o)}),s.addMethod(\"change\",E),s.addMethod(\"changes\",E),s.addMethod(\"increase\",L),s.addMethod(\"increases\",L),s.addMethod(\"decrease\",q),s.addMethod(\"decreases\",q),s.addMethod(\"by\",function(e,t){t&&a(this,\"message\",t);var s,o=a(this,\"deltaMsgObj\"),i=a(this,\"initialDeltaValue\"),r=a(this,\"finalDeltaValue\"),n=a(this,\"deltaBehavior\"),h=a(this,\"realDelta\");s=\"change\"===n?Math.abs(r-i)===Math.abs(e):h===Math.abs(e),this.assert(s,\"expected \"+o+\" to \"+n+\" by \"+e,\"expected \"+o+\" to not \"+n+\" by \"+e)}),s.addProperty(\"extensible\",function(){var e=a(this,\"object\"),t=e===Object(e)&&Object.isExtensible(e);this.assert(t,\"expected #{this} to be extensible\",\"expected #{this} to not be extensible\")}),s.addProperty(\"sealed\",function(){var e=a(this,\"object\"),t=e!==Object(e)||Object.isSealed(e);this.assert(t,\"expected #{this} to be sealed\",\"expected #{this} to not be sealed\")}),s.addProperty(\"frozen\",function(){var e=a(this,\"object\"),t=e!==Object(e)||Object.isFrozen(e);this.assert(t,\"expected #{this} to be frozen\",\"expected #{this} to not be frozen\")}),s.addProperty(\"finite\",function(e){var t=a(this,\"object\");this.assert(\"number\"==typeof t&&isFinite(t),\"expected #{this} to be a finite number\",\"expected #{this} to not be a finite number\")})}},{}],18:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(e,n){\n/*!\n   * Chai dependencies.\n   */\nvar t=e.Assertion,o=n.flag,s=e.assert=function(n,o){new t(null,null,e.assert,!0).assert(n,o,\"[ negation message unavailable ]\")};\n/*!\n   * Module export.\n   */s.fail=function(n,t,o,i){throw o=o||\"assert.fail()\",new e.AssertionError(o,{actual:n,expected:t,operator:i},s.fail)},s.isOk=function(e,n){new t(e,n,s.isOk,!0).is.ok},s.isNotOk=function(e,n){new t(e,n,s.isNotOk,!0).is.not.ok},s.equal=function(e,n,i){var r=new t(e,i,s.equal,!0);r.assert(n==o(r,\"object\"),\"expected #{this} to equal #{exp}\",\"expected #{this} to not equal #{act}\",n,e,!0)},s.notEqual=function(e,n,i){var r=new t(e,i,s.notEqual,!0);r.assert(n!=o(r,\"object\"),\"expected #{this} to not equal #{exp}\",\"expected #{this} to equal #{act}\",n,e,!0)},s.strictEqual=function(e,n,o){new t(e,o,s.strictEqual,!0).to.equal(n)},s.notStrictEqual=function(e,n,o){new t(e,o,s.notStrictEqual,!0).to.not.equal(n)},s.deepEqual=s.deepStrictEqual=function(e,n,o){new t(e,o,s.deepEqual,!0).to.eql(n)},s.notDeepEqual=function(e,n,o){new t(e,o,s.notDeepEqual,!0).to.not.eql(n)},s.isAbove=function(e,n,o){new t(e,o,s.isAbove,!0).to.be.above(n)},s.isAtLeast=function(e,n,o){new t(e,o,s.isAtLeast,!0).to.be.least(n)},s.isBelow=function(e,n,o){new t(e,o,s.isBelow,!0).to.be.below(n)},s.isAtMost=function(e,n,o){new t(e,o,s.isAtMost,!0).to.be.most(n)},s.isTrue=function(e,n){new t(e,n,s.isTrue,!0).is.true},s.isNotTrue=function(e,n){new t(e,n,s.isNotTrue,!0).to.not.equal(!0)},s.isFalse=function(e,n){new t(e,n,s.isFalse,!0).is.false},s.isNotFalse=function(e,n){new t(e,n,s.isNotFalse,!0).to.not.equal(!1)},s.isNull=function(e,n){new t(e,n,s.isNull,!0).to.equal(null)},s.isNotNull=function(e,n){new t(e,n,s.isNotNull,!0).to.not.equal(null)},s.isNaN=function(e,n){new t(e,n,s.isNaN,!0).to.be.NaN},s.isNotNaN=function(e,n){new t(e,n,s.isNotNaN,!0).not.to.be.NaN},s.exists=function(e,n){new t(e,n,s.exists,!0).to.exist},s.notExists=function(e,n){new t(e,n,s.notExists,!0).to.not.exist},s.isUndefined=function(e,n){new t(e,n,s.isUndefined,!0).to.equal(void 0)},s.isDefined=function(e,n){new t(e,n,s.isDefined,!0).to.not.equal(void 0)},s.isFunction=function(e,n){new t(e,n,s.isFunction,!0).to.be.a(\"function\")},s.isNotFunction=function(e,n){new t(e,n,s.isNotFunction,!0).to.not.be.a(\"function\")},s.isObject=function(e,n){new t(e,n,s.isObject,!0).to.be.a(\"object\")},s.isNotObject=function(e,n){new t(e,n,s.isNotObject,!0).to.not.be.a(\"object\")},s.isArray=function(e,n){new t(e,n,s.isArray,!0).to.be.an(\"array\")},s.isNotArray=function(e,n){new t(e,n,s.isNotArray,!0).to.not.be.an(\"array\")},s.isString=function(e,n){new t(e,n,s.isString,!0).to.be.a(\"string\")},s.isNotString=function(e,n){new t(e,n,s.isNotString,!0).to.not.be.a(\"string\")},s.isNumber=function(e,n){new t(e,n,s.isNumber,!0).to.be.a(\"number\")},s.isNotNumber=function(e,n){new t(e,n,s.isNotNumber,!0).to.not.be.a(\"number\")},s.isFinite=function(e,n){new t(e,n,s.isFinite,!0).to.be.finite},s.isBoolean=function(e,n){new t(e,n,s.isBoolean,!0).to.be.a(\"boolean\")},s.isNotBoolean=function(e,n){new t(e,n,s.isNotBoolean,!0).to.not.be.a(\"boolean\")},s.typeOf=function(e,n,o){new t(e,o,s.typeOf,!0).to.be.a(n)},s.notTypeOf=function(e,n,o){new t(e,o,s.notTypeOf,!0).to.not.be.a(n)},s.instanceOf=function(e,n,o){new t(e,o,s.instanceOf,!0).to.be.instanceOf(n)},s.notInstanceOf=function(e,n,o){new t(e,o,s.notInstanceOf,!0).to.not.be.instanceOf(n)},s.include=function(e,n,o){new t(e,o,s.include,!0).include(n)},s.notInclude=function(e,n,o){new t(e,o,s.notInclude,!0).not.include(n)},s.deepInclude=function(e,n,o){new t(e,o,s.deepInclude,!0).deep.include(n)},s.notDeepInclude=function(e,n,o){new t(e,o,s.notDeepInclude,!0).not.deep.include(n)},s.nestedInclude=function(e,n,o){new t(e,o,s.nestedInclude,!0).nested.include(n)},s.notNestedInclude=function(e,n,o){new t(e,o,s.notNestedInclude,!0).not.nested.include(n)},s.deepNestedInclude=function(e,n,o){new t(e,o,s.deepNestedInclude,!0).deep.nested.include(n)},s.notDeepNestedInclude=function(e,n,o){new t(e,o,s.notDeepNestedInclude,!0).not.deep.nested.include(n)},s.ownInclude=function(e,n,o){new t(e,o,s.ownInclude,!0).own.include(n)},s.notOwnInclude=function(e,n,o){new t(e,o,s.notOwnInclude,!0).not.own.include(n)},s.deepOwnInclude=function(e,n,o){new t(e,o,s.deepOwnInclude,!0).deep.own.include(n)},s.notDeepOwnInclude=function(e,n,o){new t(e,o,s.notDeepOwnInclude,!0).not.deep.own.include(n)},s.match=function(e,n,o){new t(e,o,s.match,!0).to.match(n)},s.notMatch=function(e,n,o){new t(e,o,s.notMatch,!0).to.not.match(n)},s.property=function(e,n,o){new t(e,o,s.property,!0).to.have.property(n)},s.notProperty=function(e,n,o){new t(e,o,s.notProperty,!0).to.not.have.property(n)},s.propertyVal=function(e,n,o,i){new t(e,i,s.propertyVal,!0).to.have.property(n,o)},s.notPropertyVal=function(e,n,o,i){new t(e,i,s.notPropertyVal,!0).to.not.have.property(n,o)},s.deepPropertyVal=function(e,n,o,i){new t(e,i,s.deepPropertyVal,!0).to.have.deep.property(n,o)},s.notDeepPropertyVal=function(e,n,o,i){new t(e,i,s.notDeepPropertyVal,!0).to.not.have.deep.property(n,o)},s.ownProperty=function(e,n,o){new t(e,o,s.ownProperty,!0).to.have.own.property(n)},s.notOwnProperty=function(e,n,o){new t(e,o,s.notOwnProperty,!0).to.not.have.own.property(n)},s.ownPropertyVal=function(e,n,o,i){new t(e,i,s.ownPropertyVal,!0).to.have.own.property(n,o)},s.notOwnPropertyVal=function(e,n,o,i){new t(e,i,s.notOwnPropertyVal,!0).to.not.have.own.property(n,o)},s.deepOwnPropertyVal=function(e,n,o,i){new t(e,i,s.deepOwnPropertyVal,!0).to.have.deep.own.property(n,o)},s.notDeepOwnPropertyVal=function(e,n,o,i){new t(e,i,s.notDeepOwnPropertyVal,!0).to.not.have.deep.own.property(n,o)},s.nestedProperty=function(e,n,o){new t(e,o,s.nestedProperty,!0).to.have.nested.property(n)},s.notNestedProperty=function(e,n,o){new t(e,o,s.notNestedProperty,!0).to.not.have.nested.property(n)},s.nestedPropertyVal=function(e,n,o,i){new t(e,i,s.nestedPropertyVal,!0).to.have.nested.property(n,o)},s.notNestedPropertyVal=function(e,n,o,i){new t(e,i,s.notNestedPropertyVal,!0).to.not.have.nested.property(n,o)},s.deepNestedPropertyVal=function(e,n,o,i){new t(e,i,s.deepNestedPropertyVal,!0).to.have.deep.nested.property(n,o)},s.notDeepNestedPropertyVal=function(e,n,o,i){new t(e,i,s.notDeepNestedPropertyVal,!0).to.not.have.deep.nested.property(n,o)},s.lengthOf=function(e,n,o){new t(e,o,s.lengthOf,!0).to.have.lengthOf(n)},s.hasAnyKeys=function(e,n,o){new t(e,o,s.hasAnyKeys,!0).to.have.any.keys(n)},s.hasAllKeys=function(e,n,o){new t(e,o,s.hasAllKeys,!0).to.have.all.keys(n)},s.containsAllKeys=function(e,n,o){new t(e,o,s.containsAllKeys,!0).to.contain.all.keys(n)},s.doesNotHaveAnyKeys=function(e,n,o){new t(e,o,s.doesNotHaveAnyKeys,!0).to.not.have.any.keys(n)},s.doesNotHaveAllKeys=function(e,n,o){new t(e,o,s.doesNotHaveAllKeys,!0).to.not.have.all.keys(n)},s.hasAnyDeepKeys=function(e,n,o){new t(e,o,s.hasAnyDeepKeys,!0).to.have.any.deep.keys(n)},s.hasAllDeepKeys=function(e,n,o){new t(e,o,s.hasAllDeepKeys,!0).to.have.all.deep.keys(n)},s.containsAllDeepKeys=function(e,n,o){new t(e,o,s.containsAllDeepKeys,!0).to.contain.all.deep.keys(n)},s.doesNotHaveAnyDeepKeys=function(e,n,o){new t(e,o,s.doesNotHaveAnyDeepKeys,!0).to.not.have.any.deep.keys(n)},s.doesNotHaveAllDeepKeys=function(e,n,o){new t(e,o,s.doesNotHaveAllDeepKeys,!0).to.not.have.all.deep.keys(n)},s.throws=function(e,n,i,r){(\"string\"==typeof n||n instanceof RegExp)&&(i=n,n=null);var c=new t(e,r,s.throws,!0).to.throw(n,i);return o(c,\"object\")},s.doesNotThrow=function(e,n,o,i){(\"string\"==typeof n||n instanceof RegExp)&&(o=n,n=null),new t(e,i,s.doesNotThrow,!0).to.not.throw(n,o)},s.operator=function(i,r,c,a){var u;switch(r){case\"==\":u=i==c;break;case\"===\":u=i===c;break;case\">\":u=i>c;break;case\">=\":u=i>=c;break;case\"<\":u=i<c;break;case\"<=\":u=i<=c;break;case\"!=\":u=i!=c;break;case\"!==\":u=i!==c;break;default:throw a=a?a+\": \":a,new e.AssertionError(a+'Invalid operator \"'+r+'\"',void 0,s.operator)}var l=new t(u,a,s.operator,!0);l.assert(!0===o(l,\"object\"),\"expected \"+n.inspect(i)+\" to be \"+r+\" \"+n.inspect(c),\"expected \"+n.inspect(i)+\" to not be \"+r+\" \"+n.inspect(c))},s.closeTo=function(e,n,o,i){new t(e,i,s.closeTo,!0).to.be.closeTo(n,o)},s.approximately=function(e,n,o,i){new t(e,i,s.approximately,!0).to.be.approximately(n,o)},s.sameMembers=function(e,n,o){new t(e,o,s.sameMembers,!0).to.have.same.members(n)},s.notSameMembers=function(e,n,o){new t(e,o,s.notSameMembers,!0).to.not.have.same.members(n)},s.sameDeepMembers=function(e,n,o){new t(e,o,s.sameDeepMembers,!0).to.have.same.deep.members(n)},s.notSameDeepMembers=function(e,n,o){new t(e,o,s.notSameDeepMembers,!0).to.not.have.same.deep.members(n)},s.sameOrderedMembers=function(e,n,o){new t(e,o,s.sameOrderedMembers,!0).to.have.same.ordered.members(n)},s.notSameOrderedMembers=function(e,n,o){new t(e,o,s.notSameOrderedMembers,!0).to.not.have.same.ordered.members(n)},s.sameDeepOrderedMembers=function(e,n,o){new t(e,o,s.sameDeepOrderedMembers,!0).to.have.same.deep.ordered.members(n)},s.notSameDeepOrderedMembers=function(e,n,o){new t(e,o,s.notSameDeepOrderedMembers,!0).to.not.have.same.deep.ordered.members(n)},s.includeMembers=function(e,n,o){new t(e,o,s.includeMembers,!0).to.include.members(n)},s.notIncludeMembers=function(e,n,o){new t(e,o,s.notIncludeMembers,!0).to.not.include.members(n)},s.includeDeepMembers=function(e,n,o){new t(e,o,s.includeDeepMembers,!0).to.include.deep.members(n)},s.notIncludeDeepMembers=function(e,n,o){new t(e,o,s.notIncludeDeepMembers,!0).to.not.include.deep.members(n)},s.includeOrderedMembers=function(e,n,o){new t(e,o,s.includeOrderedMembers,!0).to.include.ordered.members(n)},s.notIncludeOrderedMembers=function(e,n,o){new t(e,o,s.notIncludeOrderedMembers,!0).to.not.include.ordered.members(n)},s.includeDeepOrderedMembers=function(e,n,o){new t(e,o,s.includeDeepOrderedMembers,!0).to.include.deep.ordered.members(n)},s.notIncludeDeepOrderedMembers=function(e,n,o){new t(e,o,s.notIncludeDeepOrderedMembers,!0).to.not.include.deep.ordered.members(n)},s.oneOf=function(e,n,o){new t(e,o,s.oneOf,!0).to.be.oneOf(n)},s.changes=function(e,n,o,i){3===arguments.length&&\"function\"==typeof n&&(i=o,o=null),new t(e,i,s.changes,!0).to.change(n,o)},s.changesBy=function(e,n,o,i,r){if(4===arguments.length&&\"function\"==typeof n){var c=i;i=o,r=c}else 3===arguments.length&&(i=o,o=null);new t(e,r,s.changesBy,!0).to.change(n,o).by(i)},s.doesNotChange=function(e,n,o,i){return 3===arguments.length&&\"function\"==typeof n&&(i=o,o=null),new t(e,i,s.doesNotChange,!0).to.not.change(n,o)},s.changesButNotBy=function(e,n,o,i,r){if(4===arguments.length&&\"function\"==typeof n){var c=i;i=o,r=c}else 3===arguments.length&&(i=o,o=null);new t(e,r,s.changesButNotBy,!0).to.change(n,o).but.not.by(i)},s.increases=function(e,n,o,i){return 3===arguments.length&&\"function\"==typeof n&&(i=o,o=null),new t(e,i,s.increases,!0).to.increase(n,o)},s.increasesBy=function(e,n,o,i,r){if(4===arguments.length&&\"function\"==typeof n){var c=i;i=o,r=c}else 3===arguments.length&&(i=o,o=null);new t(e,r,s.increasesBy,!0).to.increase(n,o).by(i)},s.doesNotIncrease=function(e,n,o,i){return 3===arguments.length&&\"function\"==typeof n&&(i=o,o=null),new t(e,i,s.doesNotIncrease,!0).to.not.increase(n,o)},s.increasesButNotBy=function(e,n,o,i,r){if(4===arguments.length&&\"function\"==typeof n){var c=i;i=o,r=c}else 3===arguments.length&&(i=o,o=null);new t(e,r,s.increasesButNotBy,!0).to.increase(n,o).but.not.by(i)},s.decreases=function(e,n,o,i){return 3===arguments.length&&\"function\"==typeof n&&(i=o,o=null),new t(e,i,s.decreases,!0).to.decrease(n,o)},s.decreasesBy=function(e,n,o,i,r){if(4===arguments.length&&\"function\"==typeof n){var c=i;i=o,r=c}else 3===arguments.length&&(i=o,o=null);new t(e,r,s.decreasesBy,!0).to.decrease(n,o).by(i)},s.doesNotDecrease=function(e,n,o,i){return 3===arguments.length&&\"function\"==typeof n&&(i=o,o=null),new t(e,i,s.doesNotDecrease,!0).to.not.decrease(n,o)},s.doesNotDecreaseBy=function(e,n,o,i,r){if(4===arguments.length&&\"function\"==typeof n){var c=i;i=o,r=c}else 3===arguments.length&&(i=o,o=null);return new t(e,r,s.doesNotDecreaseBy,!0).to.not.decrease(n,o).by(i)},s.decreasesButNotBy=function(e,n,o,i,r){if(4===arguments.length&&\"function\"==typeof n){var c=i;i=o,r=c}else 3===arguments.length&&(i=o,o=null);new t(e,r,s.decreasesButNotBy,!0).to.decrease(n,o).but.not.by(i)}\n/*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */,s.ifError=function(e){if(e)throw e},s.isExtensible=function(e,n){new t(e,n,s.isExtensible,!0).to.be.extensible},s.isNotExtensible=function(e,n){new t(e,n,s.isNotExtensible,!0).to.not.be.extensible},s.isSealed=function(e,n){new t(e,n,s.isSealed,!0).to.be.sealed},s.isNotSealed=function(e,n){new t(e,n,s.isNotSealed,!0).to.not.be.sealed},s.isFrozen=function(e,n){new t(e,n,s.isFrozen,!0).to.be.frozen},s.isNotFrozen=function(e,n){new t(e,n,s.isNotFrozen,!0).to.not.be.frozen},s.isEmpty=function(e,n){new t(e,n,s.isEmpty,!0).to.be.empty},s.isNotEmpty=function(e,n){new t(e,n,s.isNotEmpty,!0).to.not.be.empty},\n/*!\n   * Aliases.\n   */\nfunction e(n,t){return s[t]=s[n],e}(\"isOk\",\"ok\")(\"isNotOk\",\"notOk\")(\"throws\",\"throw\")(\"throws\",\"Throw\")(\"isExtensible\",\"extensible\")(\"isNotExtensible\",\"notExtensible\")(\"isSealed\",\"sealed\")(\"isNotSealed\",\"notSealed\")(\"isFrozen\",\"frozen\")(\"isNotFrozen\",\"notFrozen\")(\"isEmpty\",\"empty\")(\"isNotEmpty\",\"notEmpty\")}},{}],19:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(e,t){e.expect=function(t,n){return new e.Assertion(t,n)},e.expect.fail=function(t,n,o,r){throw o=o||\"expect.fail()\",new e.AssertionError(o,{actual:t,expected:n,operator:r},e.expect.fail)}}},{}],20:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(t,n){var o=t.Assertion;function e(){Object.defineProperty(Object.prototype,\"should\",{set:function(t){Object.defineProperty(this,\"should\",{value:t,enumerable:!0,configurable:!0,writable:!0})},get:function t(){return this instanceof String||this instanceof Number||this instanceof Boolean||\"function\"==typeof Symbol&&this instanceof Symbol?new o(this.valueOf(),null,t):new o(this,null,t)},configurable:!0});var n={fail:function(o,e,i,r){throw i=i||\"should.fail()\",new t.AssertionError(i,{actual:o,expected:e,operator:r},n.fail)},equal:function(t,n,e){new o(t,e).to.equal(n)},Throw:function(t,n,e,i){new o(t,i).to.Throw(n,e)},exist:function(t,n){new o(t,n).to.exist},not:{}};return n.not.equal=function(t,n,e){new o(t,e).to.not.equal(n)},n.not.Throw=function(t,n,e,i){new o(t,i).to.not.Throw(n,e)},n.not.exist=function(t,n){new o(t,n).to.not.exist},n.throw=n.Throw,n.not.throw=n.not.Throw,n}t.should=e,t.Should=e}},{}],21:[function(require,module,exports){\n/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n/*!\n * Module dependencies\n */\nvar addLengthGuard=require(\"./addLengthGuard\"),chai=require(\"../../chai\"),flag=require(\"./flag\"),proxify=require(\"./proxify\"),transferFlags=require(\"./transferFlags\"),canSetPrototype=\"function\"==typeof Object.setPrototypeOf,testFn=function(){},excludeNames=Object.getOwnPropertyNames(testFn).filter(function(e){var t=Object.getOwnPropertyDescriptor(testFn,e);return\"object\"!=typeof t||!t.configurable}),call=Function.prototype.call,apply=Function.prototype.apply;module.exports=function(e,t,r,a){\"function\"!=typeof a&&(a=function(){});var n={method:r,chainingBehavior:a};e.__methods||(e.__methods={}),e.__methods[t]=n,Object.defineProperty(e,t,{get:function(){n.chainingBehavior.call(this);var r=function(){flag(this,\"lockSsfi\")||flag(this,\"ssfi\",r);var e=n.method.apply(this,arguments);if(void 0!==e)return e;var t=new chai.Assertion;return transferFlags(this,t),t};if(addLengthGuard(r,t,!0),canSetPrototype){var a=Object.create(this);a.call=call,a.apply=apply,Object.setPrototypeOf(r,a)}else{Object.getOwnPropertyNames(e).forEach(function(t){if(-1===excludeNames.indexOf(t)){var a=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,a)}})}return transferFlags(this,r),proxify(r)},configurable:!0})}},{\"../../chai\":14,\"./addLengthGuard\":22,\"./flag\":27,\"./proxify\":42,\"./transferFlags\":44}],22:[function(require,module,exports){var config=require(\"../config\"),fnLengthDesc=Object.getOwnPropertyDescriptor(function(){},\"length\");\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */module.exports=function(e,t,r){return fnLengthDesc.configurable?(Object.defineProperty(e,\"length\",{get:function(){if(r)throw Error(\"Invalid Chai property: \"+t+'.length. Due to a compatibility issue, \"length\" cannot directly follow \"'+t+'\". Use \"'+t+'.lengthOf\" instead.');throw Error(\"Invalid Chai property: \"+t+'.length. See docs for proper usage of \"'+t+'\".')}}),e):e}},{\"../config\":16}],23:[function(require,module,exports){\n/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar addLengthGuard=require(\"./addLengthGuard\"),chai=require(\"../../chai\"),flag=require(\"./flag\"),proxify=require(\"./proxify\"),transferFlags=require(\"./transferFlags\");module.exports=function(r,a,e){var i=function(){flag(this,\"lockSsfi\")||flag(this,\"ssfi\",i);var r=e.apply(this,arguments);if(void 0!==r)return r;var a=new chai.Assertion;return transferFlags(this,a),a};addLengthGuard(i,a,!1),r[a]=proxify(i,a)}},{\"../../chai\":14,\"./addLengthGuard\":22,\"./flag\":27,\"./proxify\":42,\"./transferFlags\":44}],24:[function(require,module,exports){\n/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar chai=require(\"../../chai\"),flag=require(\"./flag\"),isProxyEnabled=require(\"./isProxyEnabled\"),transferFlags=require(\"./transferFlags\");module.exports=function(r,e,i){i=void 0===i?function(){}:i,Object.defineProperty(r,e,{get:function r(){isProxyEnabled()||flag(this,\"lockSsfi\")||flag(this,\"ssfi\",r);var e=i.call(this);if(void 0!==e)return e;var a=new chai.Assertion;return transferFlags(this,a),a},configurable:!0})}},{\"../../chai\":14,\"./flag\":27,\"./isProxyEnabled\":37,\"./transferFlags\":44}],25:[function(require,module,exports){\n/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n/*!\n * Module dependancies\n */\nvar inspect=require(\"./inspect\");module.exports=function(e,n){return inspect(e)<inspect(n)?-1:1}},{\"./inspect\":35}],26:[function(require,module,exports){\n/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar AssertionError=require(\"assertion-error\"),flag=require(\"./flag\"),type=require(\"type-detect\");module.exports=function(e,r){var t=flag(e,\"message\"),o=flag(e,\"ssfi\");t=t?t+\": \":\"\",e=flag(e,\"object\"),(r=r.map(function(e){return e.toLowerCase()})).sort();var n=r.map(function(e,t){var o=~[\"a\",\"e\",\"i\",\"o\",\"u\"].indexOf(e.charAt(0))?\"an\":\"a\";return(r.length>1&&t===r.length-1?\"or \":\"\")+o+\" \"+e}).join(\", \"),a=type(e).toLowerCase();if(!r.some(function(e){return a===e}))throw new AssertionError(t+\"object tested must be \"+n+\", but \"+a+\" given\",void 0,o)}},{\"./flag\":27,\"assertion-error\":11,\"type-detect\":53}],27:[function(require,module,exports){\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(e,l,t){var n=e.__flags||(e.__flags=Object.create(null));if(3!==arguments.length)return n[l];n[l]=t}},{}],28:[function(require,module,exports){\n/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(e,n){return n.length>4?n[4]:e._obj}},{}],29:[function(require,module,exports){\n/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(r){var n=[];for(var o in r)n.push(o);return n}},{}],30:[function(require,module,exports){\n/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n/*!\n * Module dependancies\n */\nvar flag=require(\"./flag\"),getActual=require(\"./getActual\"),inspect=require(\"./inspect\"),objDisplay=require(\"./objDisplay\");module.exports=function(e,t){var r=flag(e,\"negate\"),a=flag(e,\"object\"),i=t[3],l=getActual(e,t),n=r?t[2]:t[1],u=flag(e,\"message\");return\"function\"==typeof n&&(n=n()),n=(n=n||\"\").replace(/#\\{this\\}/g,function(){return objDisplay(a)}).replace(/#\\{act\\}/g,function(){return objDisplay(l)}).replace(/#\\{exp\\}/g,function(){return objDisplay(i)}),u?u+\": \"+n:n}},{\"./flag\":27,\"./getActual\":28,\"./inspect\":35,\"./objDisplay\":38}],31:[function(require,module,exports){\n/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n/*!\n * Module dependancies\n */\nvar getOwnEnumerablePropertySymbols=require(\"./getOwnEnumerablePropertySymbols\");module.exports=function(e){return Object.keys(e).concat(getOwnEnumerablePropertySymbols(e))}},{\"./getOwnEnumerablePropertySymbols\":32}],32:[function(require,module,exports){\n/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(e){return\"function\"!=typeof Object.getOwnPropertySymbols?[]:Object.getOwnPropertySymbols(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})}},{}],33:[function(require,module,exports){\n/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(e){var t=Object.getOwnPropertyNames(e);function r(e){-1===t.indexOf(e)&&t.push(e)}for(var o=Object.getPrototypeOf(e);null!==o;)Object.getOwnPropertyNames(o).forEach(r),o=Object.getPrototypeOf(o);return t}},{}],34:[function(require,module,exports){\n/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\nvar pathval=require(\"pathval\");\n/*!\n * test utility\n */exports.test=require(\"./test\"),\n/*!\n * type utility\n */\nexports.type=require(\"type-detect\"),\n/*!\n * expectTypes utility\n */\nexports.expectTypes=require(\"./expectTypes\"),\n/*!\n * message utility\n */\nexports.getMessage=require(\"./getMessage\"),\n/*!\n * actual utility\n */\nexports.getActual=require(\"./getActual\"),\n/*!\n * Inspect util\n */\nexports.inspect=require(\"./inspect\"),\n/*!\n * Object Display util\n */\nexports.objDisplay=require(\"./objDisplay\"),\n/*!\n * Flag utility\n */\nexports.flag=require(\"./flag\"),\n/*!\n * Flag transferring utility\n */\nexports.transferFlags=require(\"./transferFlags\"),\n/*!\n * Deep equal utility\n */\nexports.eql=require(\"deep-eql\"),\n/*!\n * Deep path info\n */\nexports.getPathInfo=pathval.getPathInfo,\n/*!\n * Check if a property exists\n */\nexports.hasProperty=pathval.hasProperty,\n/*!\n * Function name\n */\nexports.getName=require(\"get-func-name\"),\n/*!\n * add Property\n */\nexports.addProperty=require(\"./addProperty\"),\n/*!\n * add Method\n */\nexports.addMethod=require(\"./addMethod\"),\n/*!\n * overwrite Property\n */\nexports.overwriteProperty=require(\"./overwriteProperty\"),\n/*!\n * overwrite Method\n */\nexports.overwriteMethod=require(\"./overwriteMethod\"),\n/*!\n * Add a chainable method\n */\nexports.addChainableMethod=require(\"./addChainableMethod\"),\n/*!\n * Overwrite chainable method\n */\nexports.overwriteChainableMethod=require(\"./overwriteChainableMethod\"),\n/*!\n * Compare by inspect method\n */\nexports.compareByInspect=require(\"./compareByInspect\"),\n/*!\n * Get own enumerable property symbols method\n */\nexports.getOwnEnumerablePropertySymbols=require(\"./getOwnEnumerablePropertySymbols\"),\n/*!\n * Get own enumerable properties method\n */\nexports.getOwnEnumerableProperties=require(\"./getOwnEnumerableProperties\"),\n/*!\n * Checks error against a given set of criteria\n */\nexports.checkError=require(\"check-error\"),\n/*!\n * Proxify util\n */\nexports.proxify=require(\"./proxify\"),\n/*!\n * addLengthGuard util\n */\nexports.addLengthGuard=require(\"./addLengthGuard\"),\n/*!\n * isProxyEnabled helper\n */\nexports.isProxyEnabled=require(\"./isProxyEnabled\"),\n/*!\n * isNaN method\n */\nexports.isNaN=require(\"./isNaN\")},{\"./addChainableMethod\":21,\"./addLengthGuard\":22,\"./addMethod\":23,\"./addProperty\":24,\"./compareByInspect\":25,\"./expectTypes\":26,\"./flag\":27,\"./getActual\":28,\"./getMessage\":30,\"./getOwnEnumerableProperties\":31,\"./getOwnEnumerablePropertySymbols\":32,\"./inspect\":35,\"./isNaN\":36,\"./isProxyEnabled\":37,\"./objDisplay\":38,\"./overwriteChainableMethod\":39,\"./overwriteMethod\":40,\"./overwriteProperty\":41,\"./proxify\":42,\"./test\":43,\"./transferFlags\":44,\"check-error\":45,\"deep-eql\":47,\"get-func-name\":48,pathval:49,\"type-detect\":53}],35:[function(require,module,exports){var getName=require(\"get-func-name\"),getProperties=require(\"./getProperties\"),getEnumerableProperties=require(\"./getEnumerableProperties\"),config=require(\"../config\");function inspect(e,t,r,n){return formatValue({showHidden:t,seen:[],stylize:function(e){return e}},e,void 0===r?2:r)}module.exports=inspect;var isDOMElement=function(e){return\"object\"==typeof HTMLElement?e instanceof HTMLElement:e&&\"object\"==typeof e&&\"nodeType\"in e&&1===e.nodeType&&\"string\"==typeof e.nodeName};function formatValue(e,t,r){if(t&&\"function\"==typeof t.inspect&&t.inspect!==exports.inspect&&(!t.constructor||t.constructor.prototype!==t)){var n=t.inspect(r,e);return\"string\"!=typeof n&&(n=formatValue(e,n,r)),n}var i=formatPrimitive(e,t);if(i)return i;if(isDOMElement(t)){if(\"outerHTML\"in t)return t.outerHTML;try{if(document.xmlVersion)return(new XMLSerializer).serializeToString(t);var o=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"_\");o.appendChild(t.cloneNode(!1));var a=o.innerHTML.replace(\"><\",\">\"+t.innerHTML+\"<\");return o.innerHTML=\"\",a}catch(e){}}var c,u,s=getEnumerableProperties(t),l=e.showHidden?getProperties(t):s;if(0===l.length||isError(t)&&(1===l.length&&\"stack\"===l[0]||2===l.length&&\"description\"===l[0]&&\"stack\"===l[1])){if(\"function\"==typeof t)return u=(c=getName(t))?\": \"+c:\"\",e.stylize(\"[Function\"+u+\"]\",\"special\");if(isRegExp(t))return e.stylize(RegExp.prototype.toString.call(t),\"regexp\");if(isDate(t))return e.stylize(Date.prototype.toUTCString.call(t),\"date\");if(isError(t))return formatError(t)}var p,f=\"\",g=!1,y=!1,m=[\"{\",\"}\"];if(isTypedArray(t)&&(y=!0,m=[\"[\",\"]\"]),isArray(t)&&(g=!0,m=[\"[\",\"]\"]),\"function\"==typeof t&&(f=\" [Function\"+(u=(c=getName(t))?\": \"+c:\"\")+\"]\"),isRegExp(t)&&(f=\" \"+RegExp.prototype.toString.call(t)),isDate(t)&&(f=\" \"+Date.prototype.toUTCString.call(t)),isError(t))return formatError(t);if(0===l.length&&(!g||0==t.length))return m[0]+f+m[1];if(r<0)return isRegExp(t)?e.stylize(RegExp.prototype.toString.call(t),\"regexp\"):e.stylize(\"[Object]\",\"special\");if(e.seen.push(t),g)p=formatArray(e,t,r,s,l);else{if(y)return formatTypedArray(t);p=l.map(function(n){return formatProperty(e,t,r,s,n,g)})}return e.seen.pop(),reduceToSingleString(p,f,m)}function formatPrimitive(e,t){switch(typeof t){case\"undefined\":return e.stylize(\"undefined\",\"undefined\");case\"string\":var r=\"'\"+JSON.stringify(t).replace(/^\"|\"$/g,\"\").replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"')+\"'\";return e.stylize(r,\"string\");case\"number\":return 0===t&&1/t==-1/0?e.stylize(\"-0\",\"number\"):e.stylize(\"\"+t,\"number\");case\"boolean\":return e.stylize(\"\"+t,\"boolean\");case\"symbol\":return e.stylize(t.toString(),\"symbol\")}if(null===t)return e.stylize(\"null\",\"null\")}function formatError(e){return\"[\"+Error.prototype.toString.call(e)+\"]\"}function formatArray(e,t,r,n,i){for(var o=[],a=0,c=t.length;a<c;++a)Object.prototype.hasOwnProperty.call(t,String(a))?o.push(formatProperty(e,t,r,n,String(a),!0)):o.push(\"\");return i.forEach(function(i){i.match(/^\\d+$/)||o.push(formatProperty(e,t,r,n,i,!0))}),o}function formatTypedArray(e){for(var t=\"[ \",r=0;r<e.length;++r){if(t.length>=config.truncateThreshold-7){t+=\"...\";break}t+=e[r]+\", \"}return-1!==(t+=\" ]\").indexOf(\",  ]\")&&(t=t.replace(\",  ]\",\" ]\")),t}function formatProperty(e,t,r,n,i,o){var a,c,u=Object.getOwnPropertyDescriptor(t,i);if(u&&(u.get?c=u.set?e.stylize(\"[Getter/Setter]\",\"special\"):e.stylize(\"[Getter]\",\"special\"):u.set&&(c=e.stylize(\"[Setter]\",\"special\"))),n.indexOf(i)<0&&(a=\"[\"+i+\"]\"),c||(e.seen.indexOf(t[i])<0?(c=formatValue(e,t[i],null===r?null:r-1)).indexOf(\"\\n\")>-1&&(c=o?c.split(\"\\n\").map(function(e){return\"  \"+e}).join(\"\\n\").substr(2):\"\\n\"+c.split(\"\\n\").map(function(e){return\"   \"+e}).join(\"\\n\")):c=e.stylize(\"[Circular]\",\"special\")),void 0===a){if(o&&i.match(/^\\d+$/))return c;(a=JSON.stringify(\"\"+i)).match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,\"name\")):(a=a.replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"').replace(/(^\"|\"$)/g,\"'\"),a=e.stylize(a,\"string\"))}return a+\": \"+c}function reduceToSingleString(e,t,r){return e.reduce(function(e,t){return 0,t.indexOf(\"\\n\")>=0&&0,e+t.length+1},0)>60?r[0]+(\"\"===t?\"\":t+\"\\n \")+\" \"+e.join(\",\\n  \")+\" \"+r[1]:r[0]+t+\" \"+e.join(\", \")+\" \"+r[1]}function isTypedArray(e){return\"object\"==typeof e&&/\\w+Array]$/.test(objectToString(e))}function isArray(e){return Array.isArray(e)||\"object\"==typeof e&&\"[object Array]\"===objectToString(e)}function isRegExp(e){return\"object\"==typeof e&&\"[object RegExp]\"===objectToString(e)}function isDate(e){return\"object\"==typeof e&&\"[object Date]\"===objectToString(e)}function isError(e){return\"object\"==typeof e&&\"[object Error]\"===objectToString(e)}function objectToString(e){return Object.prototype.toString.call(e)}},{\"../config\":16,\"./getEnumerableProperties\":29,\"./getProperties\":33,\"get-func-name\":48}],36:[function(require,module,exports){\n/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\nfunction isNaN(N){return N!=N}module.exports=Number.isNaN||isNaN},{}],37:[function(require,module,exports){var config=require(\"../config\");\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */module.exports=function(){return config.useProxy&&\"undefined\"!=typeof Proxy&&\"undefined\"!=typeof Reflect}},{\"../config\":16}],38:[function(require,module,exports){\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n/*!\n * Module dependancies\n */\nvar inspect=require(\"./inspect\"),config=require(\"../config\");module.exports=function(e){var n=inspect(e),t=Object.prototype.toString.call(e);if(config.truncateThreshold&&n.length>=config.truncateThreshold){if(\"[object Function]\"===t)return e.name&&\"\"!==e.name?\"[Function: \"+e.name+\"]\":\"[Function]\";if(\"[object Array]\"===t)return\"[ Array(\"+e.length+\") ]\";if(\"[object Object]\"===t){var r=Object.keys(e);return\"{ Object (\"+(r.length>2?r.splice(0,2).join(\", \")+\", ...\":r.join(\", \"))+\") }\"}return n}return n}},{\"../config\":16,\"./inspect\":35}],39:[function(require,module,exports){\n/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar chai=require(\"../../chai\"),transferFlags=require(\"./transferFlags\");module.exports=function(r,a,i,e){var n=r.__methods[a],t=n.chainingBehavior;n.chainingBehavior=function(){var r=e(t).call(this);if(void 0!==r)return r;var a=new chai.Assertion;return transferFlags(this,a),a};var s=n.method;n.method=function(){var r=i(s).apply(this,arguments);if(void 0!==r)return r;var a=new chai.Assertion;return transferFlags(this,a),a}}},{\"../../chai\":14,\"./transferFlags\":44}],40:[function(require,module,exports){\n/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar addLengthGuard=require(\"./addLengthGuard\"),chai=require(\"../../chai\"),flag=require(\"./flag\"),proxify=require(\"./proxify\"),transferFlags=require(\"./transferFlags\");module.exports=function(r,i,a){var f=r[i],t=function(){throw new Error(i+\" is not a function\")};f&&\"function\"==typeof f&&(t=f);var e=function(){flag(this,\"lockSsfi\")||flag(this,\"ssfi\",e);var r=flag(this,\"lockSsfi\");flag(this,\"lockSsfi\",!0);var i=a(t).apply(this,arguments);if(flag(this,\"lockSsfi\",r),void 0!==i)return i;var f=new chai.Assertion;return transferFlags(this,f),f};addLengthGuard(e,i,!1),r[i]=proxify(e,i)}},{\"../../chai\":14,\"./addLengthGuard\":22,\"./flag\":27,\"./proxify\":42,\"./transferFlags\":44}],41:[function(require,module,exports){\n/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar chai=require(\"../../chai\"),flag=require(\"./flag\"),isProxyEnabled=require(\"./isProxyEnabled\"),transferFlags=require(\"./transferFlags\");module.exports=function(r,e,i){var t=Object.getOwnPropertyDescriptor(r,e),a=function(){};t&&\"function\"==typeof t.get&&(a=t.get),Object.defineProperty(r,e,{get:function r(){isProxyEnabled()||flag(this,\"lockSsfi\")||flag(this,\"ssfi\",r);var e=flag(this,\"lockSsfi\");flag(this,\"lockSsfi\",!0);var t=i(a).call(this);if(flag(this,\"lockSsfi\",e),void 0!==t)return t;var s=new chai.Assertion;return transferFlags(this,s),s},configurable:!0})}},{\"../../chai\":14,\"./flag\":27,\"./isProxyEnabled\":37,\"./transferFlags\":44}],42:[function(require,module,exports){var config=require(\"../config\"),flag=require(\"./flag\"),getProperties=require(\"./getProperties\"),isProxyEnabled=require(\"./isProxyEnabled\"),builtins=[\"__flags\",\"__methods\",\"_obj\",\"assert\"];function stringDistance(e,t,r){if(!r){r=[];for(var n=0;n<=e.length;n++)r[n]=[]}return r[e.length]&&r[e.length][t.length]||(0===e.length||0===t.length?r[e.length][t.length]=Math.max(e.length,t.length):r[e.length][t.length]=Math.min(stringDistance(e.slice(0,-1),t,r)+1,stringDistance(e,t.slice(0,-1),r)+1,stringDistance(e.slice(0,-1),t.slice(0,-1),r)+(e.slice(-1)===t.slice(-1)?0:1))),r[e.length][t.length]}module.exports=function(e,t){return isProxyEnabled()?new Proxy(e,{get:function e(r,n){if(\"string\"==typeof n&&-1===config.proxyExcludedKeys.indexOf(n)&&!Reflect.has(r,n)){if(t)throw Error(\"Invalid Chai property: \"+t+\".\"+n+'. See docs for proper usage of \"'+t+'\".');var i=getProperties(r).filter(function(e){return!Object.prototype.hasOwnProperty(e)&&-1===builtins.indexOf(e)}).sort(function(e,t){return stringDistance(n,e)-stringDistance(n,t)});throw i.length&&stringDistance(i[0],n)<4?Error(\"Invalid Chai property: \"+n+'. Did you mean \"'+i[0]+'\"?'):Error(\"Invalid Chai property: \"+n)}return-1!==builtins.indexOf(n)||flag(r,\"lockSsfi\")||flag(r,\"ssfi\",e),Reflect.get(r,n)}}):e}},{\"../config\":16,\"./flag\":27,\"./getProperties\":33,\"./isProxyEnabled\":37}],43:[function(require,module,exports){\n/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n/*!\n * Module dependancies\n */\nvar flag=require(\"./flag\");module.exports=function(e,r){var a=flag(e,\"negate\"),f=r[0];return a?!f:f}},{\"./flag\":27}],44:[function(require,module,exports){\n/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports=function(e,l,s){var a=e.__flags||(e.__flags=Object.create(null));for(var _ in l.__flags||(l.__flags=Object.create(null)),s=3!==arguments.length||s,a)(s||\"object\"!==_&&\"ssfi\"!==_&&\"lockSsfi\"!==_&&\"message\"!=_)&&(l.__flags[_]=a[_])}},{}],45:[function(require,module,exports){\"use strict\";function compatibleInstance(t,e){return e instanceof Error&&t===e}function compatibleConstructor(t,e){return e instanceof Error?t.constructor===e.constructor||t instanceof e.constructor:(e.prototype instanceof Error||e===Error)&&(t.constructor===e||t instanceof e)}function compatibleMessage(t,e){var n=\"string\"==typeof t?t:t.message;return e instanceof RegExp?e.test(n):\"string\"==typeof e&&-1!==n.indexOf(e)}var functionNameMatch=/\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;function getFunctionName(t){var e=\"\";if(void 0===t.name){var n=String(t).match(functionNameMatch);n&&(e=n[1])}else e=t.name;return e}function getConstructorName(t){var e=t;return t instanceof Error?e=getFunctionName(t.constructor):\"function\"==typeof t&&(e=getFunctionName(t).trim()||getFunctionName(new t)),e}function getMessage(t){var e=\"\";return t&&t.message?e=t.message:\"string\"==typeof t&&(e=t),e}module.exports={compatibleInstance:compatibleInstance,compatibleConstructor:compatibleConstructor,compatibleMessage:compatibleMessage,getMessage:getMessage,getConstructorName:getConstructorName}},{}],46:[function(require,module,exports){!function(){\"use strict\";function t(i,e,n,s){return this instanceof t?(this.domain=i||void 0,this.path=e||\"/\",this.secure=!!n,this.script=!!s,this):new t(i,e,n,s)}function i(t,e,n){return t instanceof i?t:this instanceof i?(this.name=null,this.value=null,this.expiration_date=1/0,this.path=String(n||\"/\"),this.explicit_path=!1,this.domain=e||null,this.explicit_domain=!1,this.secure=!1,this.noscript=!1,t&&this.parse(t,e,n),this):new i(t,e,n)}t.All=Object.freeze(Object.create(null)),exports.CookieAccessInfo=t,exports.Cookie=i,i.prototype.toString=function(){var t=[this.name+\"=\"+this.value];return this.expiration_date!==1/0&&t.push(\"expires=\"+new Date(this.expiration_date).toGMTString()),this.domain&&t.push(\"domain=\"+this.domain),this.path&&t.push(\"path=\"+this.path),this.secure&&t.push(\"secure\"),this.noscript&&t.push(\"httponly\"),t.join(\"; \")},i.prototype.toValueString=function(){return this.name+\"=\"+this.value};var e=/[:](?=\\s*[a-zA-Z0-9_\\-]+\\s*[=])/g;function n(){var t,e;return this instanceof n?(t=Object.create(null),this.setCookie=function(n,s,r){var a,o;if(a=(n=new i(n,s,r)).expiration_date<=Date.now(),void 0!==t[n.name]){for(e=t[n.name],o=0;o<e.length;o+=1)if(e[o].collidesWith(n))return a?(e.splice(o,1),0===e.length&&delete t[n.name],!1):(e[o]=n,n);return!a&&(e.push(n),n)}return!a&&(t[n.name]=[n],t[n.name])},this.getCookie=function(i,n){var s,r;if(e=t[i])for(r=0;r<e.length;r+=1)if((s=e[r]).expiration_date<=Date.now())0===e.length&&delete t[s.name];else if(s.matches(n))return s},this.getCookies=function(i){var e,n,s=[];for(e in t)(n=this.getCookie(e,i))&&s.push(n);return s.toString=function(){return s.join(\":\")},s.toValueString=function(){return s.map(function(t){return t.toValueString()}).join(\";\")},s},this):new n}i.prototype.parse=function(t,e,n){if(this instanceof i){var s,r=t.split(\";\").filter(function(t){return!!t}),a=r[0].match(/([^=]+)=([\\s\\S]*)/),o=a[1],h=a[2];for(this.name=o,this.value=h,s=1;s<r.length;s+=1)switch(o=(a=r[s].match(/([^=]+)(?:=([\\s\\S]*))?/))[1].trim().toLowerCase(),h=a[2],o){case\"httponly\":this.noscript=!0;break;case\"expires\":this.expiration_date=h?Number(Date.parse(h)):1/0;break;case\"path\":this.path=h?h.trim():\"\",this.explicit_path=!0;break;case\"domain\":this.domain=h?h.trim():\"\",this.explicit_domain=!!this.domain;break;case\"secure\":this.secure=!0}return this.explicit_path||(this.path=n||\"/\"),this.explicit_domain||(this.domain=e),this}return(new i).parse(t,e,n)},i.prototype.matches=function(i){return i===t.All||!(this.noscript&&i.script||this.secure&&!i.secure||!this.collidesWith(i))},i.prototype.collidesWith=function(t){if(this.path&&!t.path||this.domain&&!t.domain)return!1;if(this.path&&0!==t.path.indexOf(this.path))return!1;if(this.explicit_path&&0!==t.path.indexOf(this.path))return!1;var i=t.domain&&t.domain.replace(/^[\\.]/,\"\"),e=this.domain&&this.domain.replace(/^[\\.]/,\"\");if(e===i)return!0;if(e){if(!this.explicit_domain)return!1;var n=i.indexOf(e);return-1!==n&&n===i.length-e.length}return!0},exports.CookieJar=n,n.prototype.setCookies=function(t,n,s){var r,a,o=[];for(t=(t=Array.isArray(t)?t:t.split(e)).map(function(t){return new i(t,n,s)}),r=0;r<t.length;r+=1)a=t[r],this.setCookie(a,n,s)&&o.push(a);return o}}()},{}],47:[function(require,module,exports){\"use strict\";\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */var type=require(\"type-detect\");function FakeMap(){this._key=\"chai/deep-eql__\"+Math.random()+Date.now()}FakeMap.prototype={get:function(e){return e[this._key]},set:function(e,r){Object.isExtensible(e)&&Object.defineProperty(e,this._key,{value:r,configurable:!0})}};var MemoizeMap=\"function\"==typeof WeakMap?WeakMap:FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/function memoizeCompare(e,r,t){if(!t||isPrimitive(e)||isPrimitive(r))return null;var n=t.get(e);if(n){var a=n.get(r);if(\"boolean\"==typeof a)return a}return null}\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/function memoizeSet(e,r,t,n){if(t&&!isPrimitive(e)&&!isPrimitive(r)){var a=t.get(e);a?a.set(r,n):((a=new MemoizeMap).set(r,n),t.set(e,a))}}\n/*!\n * Primary Export\n */function deepEqual(e,r,t){if(t&&t.comparator)return extensiveDeepEqual(e,r,t);var n=simpleEqual(e,r);return null!==n?n:extensiveDeepEqual(e,r,t)}function simpleEqual(e,r){return e===r?0!==e||1/e==1/r:e!=e&&r!=r||!isPrimitive(e)&&!isPrimitive(r)&&null}\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/function extensiveDeepEqual(e,r,t){(t=t||{}).memoize=!1!==t.memoize&&(t.memoize||new MemoizeMap);var n=t&&t.comparator,a=memoizeCompare(e,r,t.memoize);if(null!==a)return a;var i=memoizeCompare(r,e,t.memoize);if(null!==i)return i;if(n){var u=n(e,r);if(!1===u||!0===u)return memoizeSet(e,r,t.memoize,u),u;var o=simpleEqual(e,r);if(null!==o)return o}var l=type(e);if(l!==type(r))return memoizeSet(e,r,t.memoize,!1),!1;memoizeSet(e,r,t.memoize,!0);var s=extensiveDeepEqualByType(e,r,l,t);return memoizeSet(e,r,t.memoize,s),s}function extensiveDeepEqualByType(e,r,t,n){switch(t){case\"String\":case\"Number\":case\"Boolean\":case\"Date\":return deepEqual(e.valueOf(),r.valueOf());case\"Promise\":case\"Symbol\":case\"function\":case\"WeakMap\":case\"WeakSet\":case\"Error\":return e===r;case\"Arguments\":case\"Int8Array\":case\"Uint8Array\":case\"Uint8ClampedArray\":case\"Int16Array\":case\"Uint16Array\":case\"Int32Array\":case\"Uint32Array\":case\"Float32Array\":case\"Float64Array\":case\"Array\":return iterableEqual(e,r,n);case\"RegExp\":return regexpEqual(e,r);case\"Generator\":return generatorEqual(e,r,n);case\"DataView\":return iterableEqual(new Uint8Array(e.buffer),new Uint8Array(r.buffer),n);case\"ArrayBuffer\":return iterableEqual(new Uint8Array(e),new Uint8Array(r),n);case\"Set\":case\"Map\":return entriesEqual(e,r,n);default:return objectEqual(e,r,n)}}\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */function regexpEqual(e,r){return e.toString()===r.toString()}\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */function entriesEqual(e,r,t){if(e.size!==r.size)return!1;if(0===e.size)return!0;var n=[],a=[];return e.forEach(function(e,r){n.push([e,r])}),r.forEach(function(e,r){a.push([e,r])}),iterableEqual(n.sort(),a.sort(),t)}\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */function iterableEqual(e,r,t){var n=e.length;if(n!==r.length)return!1;if(0===n)return!0;for(var a=-1;++a<n;)if(!1===deepEqual(e[a],r[a],t))return!1;return!0}\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */function generatorEqual(e,r,t){return iterableEqual(getGeneratorEntries(e),getGeneratorEntries(r),t)}\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */function hasIteratorFunction(e){return\"undefined\"!=typeof Symbol&&\"object\"==typeof e&&void 0!==Symbol.iterator&&\"function\"==typeof e[Symbol.iterator]}\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */function getIteratorEntries(e){if(hasIteratorFunction(e))try{return getGeneratorEntries(e[Symbol.iterator]())}catch(e){return[]}return[]}\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */function getGeneratorEntries(e){for(var r=e.next(),t=[r.value];!1===r.done;)r=e.next(),t.push(r.value);return t}\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */function getEnumerableKeys(e){var r=[];for(var t in e)r.push(t);return r}\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */function keysEqual(e,r,t,n){var a=t.length;if(0===a)return!0;for(var i=0;i<a;i+=1)if(!1===deepEqual(e[t[i]],r[t[i]],n))return!1;return!0}\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */function objectEqual(e,r,t){var n=getEnumerableKeys(e),a=getEnumerableKeys(r);if(n.length&&n.length===a.length)return n.sort(),a.sort(),!1!==iterableEqual(n,a)&&keysEqual(e,r,n,t);var i=getIteratorEntries(e),u=getIteratorEntries(r);return i.length&&i.length===u.length?(i.sort(),u.sort(),iterableEqual(i,u,t)):0===n.length&&0===i.length&&0===a.length&&0===u.length}\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */function isPrimitive(e){return null===e||\"object\"!=typeof e}module.exports=deepEqual,module.exports.MemoizeMap=MemoizeMap},{\"type-detect\":53}],48:[function(require,module,exports){\"use strict\";var toString=Function.prototype.toString,functionNameMatch=/\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;function getFuncName(t){if(\"function\"!=typeof t)return null;var n=\"\";if(void 0===Function.prototype.name&&void 0===t.name){var e=toString.call(t).match(functionNameMatch);e&&(n=e[1])}else n=t.name;return n}module.exports=getFuncName},{}],49:[function(require,module,exports){\"use strict\";function hasProperty(e,t){return void 0!==e&&null!==e&&t in Object(e)}function parsePath(e){return e.replace(/([^\\\\])\\[/g,\"$1.[\").match(/(\\\\\\.|[^.]+?)+/g).map(function(e){var t=/^\\[(\\d+)\\]$/.exec(e);return t?{i:parseFloat(t[1])}:{p:e.replace(/\\\\([.\\[\\]])/g,\"$1\")}})}function internalGetPathValue(e,t,a){var n=e,r=null;a=void 0===a?t.length:a;for(var l=0;l<a;l++){var i=t[l];n&&(n=void 0===i.p?n[i.i]:n[i.p],l===a-1&&(r=n))}return r}function internalSetPathValue(e,t,a){for(var n=e,r=a.length,l=null,i=0;i<r;i++){var u=null,o=null;if(l=a[i],i===r-1)n[u=void 0===l.p?l.i:l.p]=t;else if(void 0!==l.p&&n[l.p])n=n[l.p];else if(void 0!==l.i&&n[l.i])n=n[l.i];else{var h=a[i+1];u=void 0===l.p?l.i:l.p,o=void 0===h.p?[]:{},n[u]=o,n=n[u]}}}function getPathInfo(e,t){var a=parsePath(t),n=a[a.length-1],r={parent:a.length>1?internalGetPathValue(e,a,a.length-1):e,name:n.p||n.i,value:internalGetPathValue(e,a)};return r.exists=hasProperty(r.parent,r.name),r}function getPathValue(e,t){return getPathInfo(e,t).value}function setPathValue(e,t,a){return internalSetPathValue(e,a,parsePath(t)),e}module.exports={hasProperty:hasProperty,getPathInfo:getPathInfo,getPathValue:getPathValue,setPathValue:setPathValue}},{}],50:[function(require,module,exports){\"use strict\";function hasOwnProperty(r,e){return Object.prototype.hasOwnProperty.call(r,e)}module.exports=function(r,e,t,n){e=e||\"&\",t=t||\"=\";var o={};if(\"string\"!=typeof r||0===r.length)return o;var a=/\\+/g;r=r.split(e);var s=1e3;n&&\"number\"==typeof n.maxKeys&&(s=n.maxKeys);var p=r.length;s>0&&p>s&&(p=s);for(var y=0;y<p;++y){var u,c,i,l,f=r[y].replace(a,\"%20\"),v=f.indexOf(t);v>=0?(u=f.substr(0,v),c=f.substr(v+1)):(u=f,c=\"\"),i=decodeURIComponent(u),l=decodeURIComponent(c),hasOwnProperty(o,i)?isArray(o[i])?o[i].push(l):o[i]=[o[i],l]:o[i]=l}return o};var isArray=Array.isArray||function(r){return\"[object Array]\"===Object.prototype.toString.call(r)}},{}],51:[function(require,module,exports){\"use strict\";var stringifyPrimitive=function(r){switch(typeof r){case\"string\":return r;case\"boolean\":return r?\"true\":\"false\";case\"number\":return isFinite(r)?r:\"\";default:return\"\"}};module.exports=function(r,e,t,n){return e=e||\"&\",t=t||\"=\",null===r&&(r=void 0),\"object\"==typeof r?map(objectKeys(r),function(n){var i=encodeURIComponent(stringifyPrimitive(n))+t;return isArray(r[n])?map(r[n],function(r){return i+encodeURIComponent(stringifyPrimitive(r))}).join(e):i+encodeURIComponent(stringifyPrimitive(r[n]))}).join(e):n?encodeURIComponent(stringifyPrimitive(n))+t+encodeURIComponent(stringifyPrimitive(r)):\"\"};var isArray=Array.isArray||function(r){return\"[object Array]\"===Object.prototype.toString.call(r)};function map(r,e){if(r.map)return r.map(e);for(var t=[],n=0;n<r.length;n++)t.push(e(r[n],n));return t}var objectKeys=Object.keys||function(r){var e=[];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&e.push(t);return e}},{}],52:[function(require,module,exports){\"use strict\";exports.decode=exports.parse=require(\"./decode\"),exports.encode=exports.stringify=require(\"./encode\")},{\"./decode\":50,\"./encode\":51}],53:[function(require,module,exports){(function(global){!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.typeDetect=t()}(this,function(){\"use strict\";var e=\"function\"==typeof Promise,t=\"object\"==typeof self?self:global,o=\"undefined\"!=typeof Symbol,n=\"undefined\"!=typeof Map,r=\"undefined\"!=typeof Set,i=\"undefined\"!=typeof WeakMap,a=\"undefined\"!=typeof WeakSet,p=\"undefined\"!=typeof DataView,f=o&&void 0!==Symbol.iterator,y=o&&void 0!==Symbol.toStringTag,l=r&&\"function\"==typeof Set.prototype.entries,u=n&&\"function\"==typeof Map.prototype.entries,d=l&&Object.getPrototypeOf((new Set).entries()),c=u&&Object.getPrototypeOf((new Map).entries()),w=f&&\"function\"==typeof Array.prototype[Symbol.iterator],m=w&&Object.getPrototypeOf([][Symbol.iterator]()),b=f&&\"function\"==typeof String.prototype[Symbol.iterator],g=b&&Object.getPrototypeOf(\"\"[Symbol.iterator]()),S=8,s=-1;return function(o){var f=typeof o;if(\"object\"!==f)return f;if(null===o)return\"null\";if(o===t)return\"global\";if(Array.isArray(o)&&(!1===y||!(Symbol.toStringTag in o)))return\"Array\";if(\"object\"==typeof window&&null!==window){if(\"object\"==typeof window.location&&o===window.location)return\"Location\";if(\"object\"==typeof window.document&&o===window.document)return\"Document\";if(\"object\"==typeof window.navigator){if(\"object\"==typeof window.navigator.mimeTypes&&o===window.navigator.mimeTypes)return\"MimeTypeArray\";if(\"object\"==typeof window.navigator.plugins&&o===window.navigator.plugins)return\"PluginArray\"}if((\"function\"==typeof window.HTMLElement||\"object\"==typeof window.HTMLElement)&&o instanceof window.HTMLElement){if(\"BLOCKQUOTE\"===o.tagName)return\"HTMLQuoteElement\";if(\"TD\"===o.tagName)return\"HTMLTableDataCellElement\";if(\"TH\"===o.tagName)return\"HTMLTableHeaderCellElement\"}}var l=y&&o[Symbol.toStringTag];if(\"string\"==typeof l)return l;var u=Object.getPrototypeOf(o);return u===RegExp.prototype?\"RegExp\":u===Date.prototype?\"Date\":e&&u===Promise.prototype?\"Promise\":r&&u===Set.prototype?\"Set\":n&&u===Map.prototype?\"Map\":a&&u===WeakSet.prototype?\"WeakSet\":i&&u===WeakMap.prototype?\"WeakMap\":p&&u===DataView.prototype?\"DataView\":n&&u===c?\"Map Iterator\":r&&u===d?\"Set Iterator\":w&&u===m?\"Array Iterator\":b&&u===g?\"String Iterator\":null===u?\"Object\":Object.prototype.toString.call(o).slice(S,s)}})}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{})},{}],54:[function(require,module,exports){\"use strict\";var punycode=require(\"punycode\"),util=require(\"./util\");function Url(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}exports.parse=urlParse,exports.resolve=urlResolve,exports.resolveObject=urlResolveObject,exports.format=urlFormat,exports.Url=Url;var protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,simplePathPattern=/^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,delims=[\"<\",\">\",'\"',\"`\",\" \",\"\\r\",\"\\n\",\"\\t\"],unwise=[\"{\",\"}\",\"|\",\"\\\\\",\"^\",\"`\"].concat(delims),autoEscape=[\"'\"].concat(unwise),nonHostChars=[\"%\",\"/\",\"?\",\";\",\"#\"].concat(autoEscape),hostEndingChars=[\"/\",\"?\",\"#\"],hostnameMaxLen=255,hostnamePartPattern=/^[+a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,unsafeProtocol={javascript:!0,\"javascript:\":!0},hostlessProtocol={javascript:!0,\"javascript:\":!0},slashedProtocol={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,\"http:\":!0,\"https:\":!0,\"ftp:\":!0,\"gopher:\":!0,\"file:\":!0},querystring=require(\"querystring\");function urlParse(t,s,e){if(t&&util.isObject(t)&&t instanceof Url)return t;var h=new Url;return h.parse(t,s,e),h}function urlFormat(t){return util.isString(t)&&(t=urlParse(t)),t instanceof Url?t.format():Url.prototype.format.call(t)}function urlResolve(t,s){return urlParse(t,!1,!0).resolve(s)}function urlResolveObject(t,s){return t?urlParse(t,!1,!0).resolveObject(s):s}Url.prototype.parse=function(t,s,e){if(!util.isString(t))throw new TypeError(\"Parameter 'url' must be a string, not \"+typeof t);var h=t.indexOf(\"?\"),r=-1!==h&&h<t.indexOf(\"#\")?\"?\":\"#\",a=t.split(r);a[0]=a[0].replace(/\\\\/g,\"/\");var o=t=a.join(r);if(o=o.trim(),!e&&1===t.split(\"#\").length){var n=simplePathPattern.exec(o);if(n)return this.path=o,this.href=o,this.pathname=n[1],n[2]?(this.search=n[2],this.query=s?querystring.parse(this.search.substr(1)):this.search.substr(1)):s&&(this.search=\"\",this.query={}),this}var i=protocolPattern.exec(o);if(i){var l=(i=i[0]).toLowerCase();this.protocol=l,o=o.substr(i.length)}if(e||i||o.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)){var u=\"//\"===o.substr(0,2);!u||i&&hostlessProtocol[i]||(o=o.substr(2),this.slashes=!0)}if(!hostlessProtocol[i]&&(u||i&&!slashedProtocol[i])){for(var p,c,f=-1,m=0;m<hostEndingChars.length;m++){-1!==(v=o.indexOf(hostEndingChars[m]))&&(-1===f||v<f)&&(f=v)}-1!==(c=-1===f?o.lastIndexOf(\"@\"):o.lastIndexOf(\"@\",f))&&(p=o.slice(0,c),o=o.slice(c+1),this.auth=decodeURIComponent(p)),f=-1;for(m=0;m<nonHostChars.length;m++){var v;-1!==(v=o.indexOf(nonHostChars[m]))&&(-1===f||v<f)&&(f=v)}-1===f&&(f=o.length),this.host=o.slice(0,f),o=o.slice(f),this.parseHost(),this.hostname=this.hostname||\"\";var g=\"[\"===this.hostname[0]&&\"]\"===this.hostname[this.hostname.length-1];if(!g)for(var y=this.hostname.split(/\\./),P=(m=0,y.length);m<P;m++){var d=y[m];if(d&&!d.match(hostnamePartPattern)){for(var b=\"\",q=0,O=d.length;q<O;q++)d.charCodeAt(q)>127?b+=\"x\":b+=d[q];if(!b.match(hostnamePartPattern)){var j=y.slice(0,m),x=y.slice(m+1),U=d.match(hostnamePartStart);U&&(j.push(U[1]),x.unshift(U[2])),x.length&&(o=\"/\"+x.join(\".\")+o),this.hostname=j.join(\".\");break}}}this.hostname.length>hostnameMaxLen?this.hostname=\"\":this.hostname=this.hostname.toLowerCase(),g||(this.hostname=punycode.toASCII(this.hostname));var C=this.port?\":\"+this.port:\"\",A=this.hostname||\"\";this.host=A+C,this.href+=this.host,g&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),\"/\"!==o[0]&&(o=\"/\"+o))}if(!unsafeProtocol[l])for(m=0,P=autoEscape.length;m<P;m++){var w=autoEscape[m];if(-1!==o.indexOf(w)){var E=encodeURIComponent(w);E===w&&(E=escape(w)),o=o.split(w).join(E)}}var I=o.indexOf(\"#\");-1!==I&&(this.hash=o.substr(I),o=o.slice(0,I));var R=o.indexOf(\"?\");if(-1!==R?(this.search=o.substr(R),this.query=o.substr(R+1),s&&(this.query=querystring.parse(this.query)),o=o.slice(0,R)):s&&(this.search=\"\",this.query={}),o&&(this.pathname=o),slashedProtocol[l]&&this.hostname&&!this.pathname&&(this.pathname=\"/\"),this.pathname||this.search){C=this.pathname||\"\";var S=this.search||\"\";this.path=C+S}return this.href=this.format(),this},Url.prototype.format=function(){var t=this.auth||\"\";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,\":\"),t+=\"@\");var s=this.protocol||\"\",e=this.pathname||\"\",h=this.hash||\"\",r=!1,a=\"\";this.host?r=t+this.host:this.hostname&&(r=t+(-1===this.hostname.indexOf(\":\")?this.hostname:\"[\"+this.hostname+\"]\"),this.port&&(r+=\":\"+this.port)),this.query&&util.isObject(this.query)&&Object.keys(this.query).length&&(a=querystring.stringify(this.query));var o=this.search||a&&\"?\"+a||\"\";return s&&\":\"!==s.substr(-1)&&(s+=\":\"),this.slashes||(!s||slashedProtocol[s])&&!1!==r?(r=\"//\"+(r||\"\"),e&&\"/\"!==e.charAt(0)&&(e=\"/\"+e)):r||(r=\"\"),h&&\"#\"!==h.charAt(0)&&(h=\"#\"+h),o&&\"?\"!==o.charAt(0)&&(o=\"?\"+o),s+r+(e=e.replace(/[?#]/g,function(t){return encodeURIComponent(t)}))+(o=o.replace(\"#\",\"%23\"))+h},Url.prototype.resolve=function(t){return this.resolveObject(urlParse(t,!1,!0)).format()},Url.prototype.resolveObject=function(t){if(util.isString(t)){var s=new Url;s.parse(t,!1,!0),t=s}for(var e=new Url,h=Object.keys(this),r=0;r<h.length;r++){var a=h[r];e[a]=this[a]}if(e.hash=t.hash,\"\"===t.href)return e.href=e.format(),e;if(t.slashes&&!t.protocol){for(var o=Object.keys(t),n=0;n<o.length;n++){var i=o[n];\"protocol\"!==i&&(e[i]=t[i])}return slashedProtocol[e.protocol]&&e.hostname&&!e.pathname&&(e.path=e.pathname=\"/\"),e.href=e.format(),e}if(t.protocol&&t.protocol!==e.protocol){if(!slashedProtocol[t.protocol]){for(var l=Object.keys(t),u=0;u<l.length;u++){var p=l[u];e[p]=t[p]}return e.href=e.format(),e}if(e.protocol=t.protocol,t.host||hostlessProtocol[t.protocol])e.pathname=t.pathname;else{for(var c=(t.pathname||\"\").split(\"/\");c.length&&!(t.host=c.shift()););t.host||(t.host=\"\"),t.hostname||(t.hostname=\"\"),\"\"!==c[0]&&c.unshift(\"\"),c.length<2&&c.unshift(\"\"),e.pathname=c.join(\"/\")}if(e.search=t.search,e.query=t.query,e.host=t.host||\"\",e.auth=t.auth,e.hostname=t.hostname||t.host,e.port=t.port,e.pathname||e.search){var f=e.pathname||\"\",m=e.search||\"\";e.path=f+m}return e.slashes=e.slashes||t.slashes,e.href=e.format(),e}var v=e.pathname&&\"/\"===e.pathname.charAt(0),g=t.host||t.pathname&&\"/\"===t.pathname.charAt(0),y=g||v||e.host&&t.pathname,P=y,d=e.pathname&&e.pathname.split(\"/\")||[],b=(c=t.pathname&&t.pathname.split(\"/\")||[],e.protocol&&!slashedProtocol[e.protocol]);if(b&&(e.hostname=\"\",e.port=null,e.host&&(\"\"===d[0]?d[0]=e.host:d.unshift(e.host)),e.host=\"\",t.protocol&&(t.hostname=null,t.port=null,t.host&&(\"\"===c[0]?c[0]=t.host:c.unshift(t.host)),t.host=null),y=y&&(\"\"===c[0]||\"\"===d[0])),g)e.host=t.host||\"\"===t.host?t.host:e.host,e.hostname=t.hostname||\"\"===t.hostname?t.hostname:e.hostname,e.search=t.search,e.query=t.query,d=c;else if(c.length)d||(d=[]),d.pop(),d=d.concat(c),e.search=t.search,e.query=t.query;else if(!util.isNullOrUndefined(t.search)){if(b)e.hostname=e.host=d.shift(),(U=!!(e.host&&e.host.indexOf(\"@\")>0)&&e.host.split(\"@\"))&&(e.auth=U.shift(),e.host=e.hostname=U.shift());return e.search=t.search,e.query=t.query,util.isNull(e.pathname)&&util.isNull(e.search)||(e.path=(e.pathname?e.pathname:\"\")+(e.search?e.search:\"\")),e.href=e.format(),e}if(!d.length)return e.pathname=null,e.search?e.path=\"/\"+e.search:e.path=null,e.href=e.format(),e;for(var q=d.slice(-1)[0],O=(e.host||t.host||d.length>1)&&(\".\"===q||\"..\"===q)||\"\"===q,j=0,x=d.length;x>=0;x--)\".\"===(q=d[x])?d.splice(x,1):\"..\"===q?(d.splice(x,1),j++):j&&(d.splice(x,1),j--);if(!y&&!P)for(;j--;j)d.unshift(\"..\");!y||\"\"===d[0]||d[0]&&\"/\"===d[0].charAt(0)||d.unshift(\"\"),O&&\"/\"!==d.join(\"/\").substr(-1)&&d.push(\"\");var U,C=\"\"===d[0]||d[0]&&\"/\"===d[0].charAt(0);b&&(e.hostname=e.host=C?\"\":d.length?d.shift():\"\",(U=!!(e.host&&e.host.indexOf(\"@\")>0)&&e.host.split(\"@\"))&&(e.auth=U.shift(),e.host=e.hostname=U.shift()));return(y=y||e.host&&d.length)&&!C&&d.unshift(\"\"),d.length?e.pathname=d.join(\"/\"):(e.pathname=null,e.path=null),util.isNull(e.pathname)&&util.isNull(e.search)||(e.path=(e.pathname?e.pathname:\"\")+(e.search?e.search:\"\")),e.auth=t.auth||e.auth,e.slashes=e.slashes||t.slashes,e.href=e.format(),e},Url.prototype.parseHost=function(){var t=this.host,s=portPattern.exec(t);s&&(\":\"!==(s=s[0])&&(this.port=s.substr(1)),t=t.substr(0,t.length-s.length)),t&&(this.hostname=t)}},{\"./util\":55,punycode:12,querystring:52}],55:[function(require,module,exports){\"use strict\";module.exports={isString:function(n){return\"string\"==typeof n},isObject:function(n){return\"object\"==typeof n&&null!==n},isNull:function(n){return null===n},isNullOrUndefined:function(n){return null==n}}},{}]},{},[5])(5)});\n//# sourceMappingURL=postman-bdd.min.js.map\n//# sourceMappingURL=postman-bdd.min.js.map",
        "key": "postmanBDD"
      },
      {
        "type": "any",
        "value": "function basicResponseValidation ()\n{\n    describe(\"Basic Response Checks\", () =>\n    {\n        \n        it(\"The response is json\", () =>\n        {\n            response.should.be.json;\n        })\n\n        it(\"status code is 200\", () =>\n        {\n            response.should.have.status(200)\n        })\n    })\n}",
        "key": "basicResponseValidation"
      },
      {
        "type": "any",
        "value": "function basicRequestValidation ()\n{\n    //var request_body_json = JSON.parse(pm.request.body.raw)\n    describe(\"Basic Request checks\", () =>\n    {\n       var is_base_URL_valid = \n       it(\"is Base URL correct\", () =>\n       {\n            expect(environment.BASE).to.eql(\"https://mdev-ws.globextranet.com/globecapital\")\n        })\n        \n        if(is_base_URL_valid !== true)\n        {\n            pm.environment.set(\"BASE\",\"https://mdev-ws.globextranet.com/globecapital\")\n        }\n        \n        /*\n        var is_request_is_json = it(\"Is Request body has json\", () =>\n        {\n            expect(request_body_json).to.be.an('object')\n        })\n        \n        if(is_request_is_json)\n        {\n            it(\"Request has content-type as application/json\", () =>\n            {\n                request.should.have.header('Content-Type', 'application/json')\n            })\n        }\n        */\n        \n\n    })\n}",
        "key": "basicRequestValidation"
      },
      {
        "type": "any",
        "value": "function isSessionMaintained()\n{\n    it(\"Is sessionId maintained\", () =>\n    {\n        expect(pm.cookies.get('sessionID')).to.eql(environment.session_id)\n    })\n}",
        "key": "isSessionMaintained"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 17,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 3,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 364.75,
      "responseMin": 62,
      "responseMax": 791,
      "responseSd": 306.60265409810137,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1582269103074,
      "completed": 1582269105271
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 14,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0b21f195-a63e-4cdf-89e3-dd895c05cb38",
          "httpRequestId": "a3a20926-ad7d-4beb-af51-0e5170c8b2c3"
        },
        "item": {
          "id": "c6fe9e53-81fa-40bc-bf33-93d8536ae4d6",
          "name": "Initreq",
          "request": {
            "url": {
              "path": [
                "Init",
                "Base",
                "1.0.0"
              ],
              "host": [
                "{{BASE}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"request\": {\r\n    \r\n    \"data\": {\r\n      \"software\": {\r\n        \"osType\": \"Marshmallow\",\r\n        \"osVendor\": \"Google\",\r\n        \"osName\": \"Android\",\r\n        \"osVersion\": \"6.1.0\"\r\n      },\r\n      \"network\": {\r\n        \"imsi\": \"832367839500833\",\r\n        \"gps\": \"\",\r\n        \"wlan\": \"\",\r\n        \"cellular\": \"\"\r\n      },\r\n      \"hardware\": {\r\n        \"keyboard\": \"QWERTY\",\r\n        \"screen\": \"320 X 240\",\r\n        \"model\": \"BlackBerry Curve 9220\",\r\n        \"imei\": \"011234587362135\",\r\n        \"display\": \"Touch Sensitive Optical Trackpad\",\r\n        \"vendor\": \"RIM\",\r\n        \"deviceType\":\"Marshmallow\"\r\n      },\r\n      \"appID\": \"0\",\r\n      \"app\": {\r\n        \"version\": \"0.0.9\",\r\n        \"name\": \"samco\",\r\n        \"channel\": \"androidmarket\",\r\n        \"build\": \"hybrid-phone\"\r\n      }\r\n    },\r\n    \"appID\": \"0\"\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f92ee366-6dea-4284-890c-ac910efd2cc7",
                "type": "text/javascript",
                "exec": [
                  "eval(globals.postmanBDD);",
                  "//eval(globals.basicRequestValidation)",
                  "",
                  "function basicRequestValidation ()",
                  "{",
                  "    //var request_body_json = JSON.parse(pm.request.body.raw)",
                  "    describe(\"Basic Request checks\", () =>",
                  "    {",
                  "       var is_base_URL_valid = ",
                  "       it(\"is Base URL correct\", () =>",
                  "       {",
                  "            expect(environment.BASE).to.eql(\"https://mdev-ws.globextranet.com/globecapital\")",
                  "        })",
                  "        ",
                  "        if(is_base_URL_valid !== true)",
                  "        {",
                  "            pm.environment.set(\"BASE\",\"https://mdev-ws.globextranet.com/globecapital\")",
                  "        }",
                  "        ",
                  "        /*",
                  "        var is_request_is_json = it(\"Is Request body has json\", () =>",
                  "        {",
                  "            expect(request_body_json).to.be.an('object')",
                  "        })",
                  "        ",
                  "        if(is_request_is_json)",
                  "        {",
                  "            it(\"Request has content-type as application/json\", () =>",
                  "            {",
                  "                request.should.have.header('Content-Type', 'application/json')",
                  "            })",
                  "        }",
                  "        */",
                  "        ",
                  "",
                  "    })",
                  "}",
                  "",
                  "postman.setGlobalVariable(\"basicRequestValidation\",basicRequestValidation)",
                  "",
                  "",
                  "basicRequestValidation()",
                  "",
                  ""
                ],
                "_lastExecutionId": "9594df7d-217c-4cb4-bc90-2539ccb2ce23"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b4f6fc07-d20e-4a9e-a76d-d8d607ede9e2",
                "type": "text/javascript",
                "exec": [
                  "eval(globals.postmanBDD);",
                  "//eval(globals.basicResponseValidation)",
                  "",
                  "//Defining a function \"basicResponseValidation()\"\".",
                  "function basicResponseValidation ()",
                  "{",
                  "    describe(\"Basic Response Checks\", () =>",
                  "    {",
                  "        ",
                  "        it(\"The response is json\", () =>",
                  "        {",
                  "            response.should.be.json;",
                  "        })",
                  "",
                  "        it(\"status code is 200\", () =>",
                  "        {",
                  "            response.should.have.status(200)",
                  "        })",
                  "    })",
                  "}",
                  "",
                  "//storing the functino basicResponseValidation() in a global variable called \"basicResponseValidation.\"",
                  "postman.setGlobalVariable(\"basicResponseValidation\",basicResponseValidation)    ",
                  "",
                  "//calling the basicResponseValidation function, which is stored in a global variable called \"basicResponseValidation.\".",
                  "chai.use(basicResponseValidation)",
                  "",
                  "",
                  "it(\"Is response has key called 'appID'\", () =>",
                  "{",
                  "    expect(response.body.response.data).to.have.property('appID')",
                  "})",
                  "",
                  "",
                  "//checking APP_ID is not null and containing 32 characters.",
                  "var is_APP_ID_valid =  ",
                  "(",
                  "    it(\"is APP_ID not null\", () =>",
                  "    {",
                  "        assert((environment.APP_ID).should.not.equal(\"\"),\"APP_ID cannot be null.\")",
                  "    })",
                  "",
                  "&&",
                  "",
                  "    it(\"Is APP_ID has 32 characters\", () =>",
                  "    {",
                  "        expect(environment.APP_ID.length).to.equal(32)",
                  "    })",
                  ")",
                  "",
                  "//if APP_ID invalid, change it to one that you got in your response.",
                  "if(is_APP_ID_valid === false)",
                  "{",
                  "    pm.environment.set(\"APP_ID\",response.body.response.data.appID)",
                  "    postman.setNextRequest(\"Initreq\")",
                  "}",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "aba50b1d-a958-4ce4-b47f-b50cff0de4d3"
              }
            }
          ]
        },
        "assertions": [
          {
            "assertion": "1. Basic Request checks - is Base URL correct",
            "skipped": false
          },
          {
            "assertion": "1. Basic Response Checks - The response is json",
            "skipped": false
          },
          {
            "assertion": "2. Basic Response Checks - status code is 200",
            "skipped": false
          },
          {
            "assertion": "3. Is response has key called 'appID'",
            "skipped": false
          },
          {
            "assertion": "4. is APP_ID not null",
            "skipped": false
          },
          {
            "assertion": "5. Is APP_ID has 32 characters",
            "skipped": false
          }
        ],
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "globecapital",
              "Init",
              "Base",
              "1.0.0"
            ],
            "host": [
              "mdev-ws",
              "globextranet",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.21.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fc96abab-25d8-48e2-b0e5-fa03533fbaff",
              "system": true
            },
            {
              "key": "Host",
              "value": "mdev-ws.globextranet.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 823,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"request\": {\r\n    \r\n    \"data\": {\r\n      \"software\": {\r\n        \"osType\": \"Marshmallow\",\r\n        \"osVendor\": \"Google\",\r\n        \"osName\": \"Android\",\r\n        \"osVersion\": \"6.1.0\"\r\n      },\r\n      \"network\": {\r\n        \"imsi\": \"832367839500833\",\r\n        \"gps\": \"\",\r\n        \"wlan\": \"\",\r\n        \"cellular\": \"\"\r\n      },\r\n      \"hardware\": {\r\n        \"keyboard\": \"QWERTY\",\r\n        \"screen\": \"320 X 240\",\r\n        \"model\": \"BlackBerry Curve 9220\",\r\n        \"imei\": \"011234587362135\",\r\n        \"display\": \"Touch Sensitive Optical Trackpad\",\r\n        \"vendor\": \"RIM\",\r\n        \"deviceType\":\"Marshmallow\"\r\n      },\r\n      \"appID\": \"0\",\r\n      \"app\": {\r\n        \"version\": \"0.0.9\",\r\n        \"name\": \"samco\",\r\n        \"channel\": \"androidmarket\",\r\n        \"build\": \"hybrid-phone\"\r\n      }\r\n    },\r\n    \"appID\": \"0\"\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d3338e12-9bac-4a44-b9c1-d771f14f07f9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "RioServer"
            },
            {
              "key": "Date",
              "value": "Fri, 21 Feb 2020 07:12:38 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=UTF-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Expose-Headers",
              "value": "Set-Cookie, Cookie, Content-Type"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "POST"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              105,
              110,
              102,
              111,
              73,
              68,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              112,
              112,
              73,
              68,
              34,
              58,
              34,
              101,
              97,
              50,
              49,
              98,
              54,
              50,
              56,
              54,
              56,
              98,
              56,
              97,
              57,
              102,
              57,
              55,
              101,
              53,
              51,
              102,
              99,
              50,
              52,
              98,
              55,
              102,
              102,
              100,
              55,
              101,
              48,
              34,
              125,
              44,
              34,
              105,
              110,
              102,
              111,
              77,
              115,
              103,
              34,
              58,
              34,
              34,
              44,
              34,
              109,
              115,
              103,
              73,
              68,
              34,
              58,
              34,
              57,
              56,
              50,
              97,
              102,
              51,
              49,
              53,
              45,
              56,
              57,
              100,
              49,
              45,
              52,
              98,
              97,
              57,
              45,
              56,
              101,
              54,
              102,
              45,
              101,
              102,
              50,
              55,
              99,
              100,
              99,
              57,
              56,
              97,
              100,
              56,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              84,
              105,
              109,
              101,
              34,
              58,
              34,
              49,
              53,
              56,
              50,
              50,
              54,
              57,
              49,
              53,
              56,
              54,
              50,
              48,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 791,
          "responseSize": 168
        },
        "id": "c6fe9e53-81fa-40bc-bf33-93d8536ae4d6"
      },
      {
        "cursor": {
          "ref": "936934e7-532c-40ec-8566-9f9250ef0e9c",
          "length": 14,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b2a0cc7c-cfbe-4049-91d5-531325b02aaf"
        },
        "item": {
          "id": "5c62ffcc-2c5b-47e6-be8a-097526f4d440",
          "name": "Config",
          "request": {
            "url": {
              "path": [
                "Config",
                "Base",
                "1.0.0"
              ],
              "host": [
                "{{BASE}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"request\": {\r\n    \"requestType\": \"U\",\r\n    \"data\": {\r\n      \"app\": \"0\",\r\n      \"message\": \"0\"\r\n    },\r\n    \"appID\": {{APP_ID}},\r\n    \"formFactor\": \"M\"\r\n  }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "18d23ba7-bf3f-4046-8703-bca59ddfd703",
                "type": "text/javascript",
                "exec": [
                  "eval(globals.postmanBDD);",
                  "eval(globals.basicResponseValidation)",
                  "",
                  "chai.use(basicResponseValidation)",
                  ""
                ],
                "_lastExecutionId": "b30811d9-4154-4da6-85cf-af8f2c270e41"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1745c058-7205-46a1-a72f-0f877aafeb67",
                "type": "text/javascript",
                "exec": [
                  "eval(globals.postmanBDD)",
                  "eval(globals.basicRequestValidation)",
                  "",
                  "chai.use(basicRequestValidation)"
                ],
                "_lastExecutionId": "01345eb2-45d0-4931-9f3c-91d18fdda8f0"
              }
            }
          ]
        },
        "assertions": [
          {
            "assertion": "1. Basic Request checks - is Base URL correct",
            "skipped": false
          },
          {
            "assertion": "1. Basic Response Checks - The response is json",
            "skipped": false
          },
          {
            "assertion": "2. Basic Response Checks - status code is 200",
            "skipped": false
          }
        ],
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "globecapital",
              "Config",
              "Base",
              "1.0.0"
            ],
            "host": [
              "mdev-ws",
              "globextranet",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.21.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7a9be47e-240c-4eb9-aba1-68bf3b2ae0ed",
              "system": true
            },
            {
              "key": "Host",
              "value": "mdev-ws.globextranet.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 187,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"request\": {\r\n    \"requestType\": \"U\",\r\n    \"data\": {\r\n      \"app\": \"0\",\r\n      \"message\": \"0\"\r\n    },\r\n    \"appID\": 51c3a70f53e11c6999734132aedeb7a0,\r\n    \"formFactor\": \"M\"\r\n  }\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "1ee79776-137d-4dd9-b4f0-ca013dcaf09d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "RioServer"
            },
            {
              "key": "Date",
              "value": "Fri, 21 Feb 2020 07:12:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=UTF-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Expose-Headers",
              "value": "Set-Cookie, Cookie, Content-Type"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "POST"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              105,
              110,
              102,
              111,
              73,
              68,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              112,
              112,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              58,
              91,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              103,
              108,
              111,
              98,
              101,
              99,
              97,
              112,
              105,
              116,
              97,
              108,
              46,
              99,
              111,
              109,
              47,
              111,
              112,
              101,
              110,
              97,
              99,
              99,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              79,
              112,
              101,
              110,
              65,
              110,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              76,
              105,
              110,
              107,
              34,
              125,
              44,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              53,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              77,
              97,
              120,
              87,
              97,
              116,
              99,
              104,
              108,
              105,
              115,
              116,
              67,
              111,
              117,
              110,
              116,
              34,
              125,
              44,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              50,
              53,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              77,
              97,
              120,
              87,
              97,
              116,
              99,
              104,
              108,
              105,
              115,
              116,
              83,
              121,
              109,
              67,
              111,
              117,
              110,
              116,
              34,
              125,
              44,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              103,
              108,
              111,
              98,
              101,
              99,
              97,
              112,
              105,
              116,
              97,
              108,
              111,
              110,
              108,
              105,
              110,
              101,
              46,
              99,
              111,
              109,
              47,
              104,
              116,
              109,
              108,
              53,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              46,
              104,
              116,
              109,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              84,
              101,
              114,
              109,
              115,
              65,
              110,
              100,
              67,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              115,
              34,
              125,
              44,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              84,
              67,
              80,
              82,
              101,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              73,
              110,
              116,
              101,
              114,
              118,
              97,
              108,
              34,
              125,
              44,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              51,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              72,
              116,
              116,
              112,
              82,
              101,
              113,
              84,
              105,
              109,
              101,
              111,
              117,
              116,
              34,
              125,
              44,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              51,
              48,
              48,
              48,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              80,
              111,
              115,
              105,
              116,
              110,
              85,
              112,
              100,
              97,
              116,
              101,
              73,
              110,
              116,
              101,
              114,
              118,
              97,
              108,
              34,
              125,
              44,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              53,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              77,
              97,
              120,
              77,
              80,
              73,
              78,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              34,
              125,
              93,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              49,
              125,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              68,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              123,
              34,
              97,
              112,
              112,
              86,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              51,
              34,
              44,
              34,
              114,
              101,
              108,
              101,
              97,
              115,
              101,
              78,
              111,
              116,
              101,
              115,
              34,
              58,
              34,
              49,
              46,
              77,
              86,
              80,
              32,
              49,
              46,
              48,
              32,
              82,
              101,
              108,
              101,
              97,
              115,
              101,
              32,
              70,
              101,
              97,
              116,
              117,
              114,
              101,
              115,
              92,
              110,
              50,
              46,
              32,
              83,
              112,
              114,
              105,
              110,
              116,
              32,
              50,
              32,
              38,
              32,
              51,
              32,
              66,
              117,
              103,
              32,
              70,
              105,
              120,
              101,
              115,
              34,
              44,
              34,
              109,
              97,
              110,
              100,
              97,
              116,
              111,
              114,
              121,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              105,
              110,
              115,
              116,
              97,
              108,
              108,
              46,
              97,
              112,
              112,
              99,
              101,
              110,
              116,
              101,
              114,
              46,
              109,
              115,
              47,
              111,
              114,
              103,
              115,
              47,
              71,
              108,
              111,
              98,
              101,
              45,
              67,
              97,
              112,
              105,
              116,
              97,
              108,
              47,
              97,
              112,
              112,
              115,
              47,
              71,
              108,
              111,
              98,
              101,
              45,
              67,
              97,
              112,
              105,
              116,
              97,
              108,
              45,
              81,
              65,
              45,
              49,
              34,
              125,
              125,
              44,
              34,
              105,
              110,
              102,
              111,
              77,
              115,
              103,
              34,
              58,
              34,
              34,
              44,
              34,
              109,
              115,
              103,
              73,
              68,
              34,
              58,
              34,
              99,
              49,
              54,
              99,
              51,
              100,
              50,
              50,
              45,
              54,
              54,
              57,
              51,
              45,
              52,
              52,
              49,
              53,
              45,
              97,
              51,
              50,
              51,
              45,
              52,
              50,
              52,
              101,
              49,
              48,
              102,
              55,
              97,
              55,
              56,
              48,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              84,
              105,
              109,
              101,
              34,
              58,
              34,
              49,
              53,
              56,
              50,
              50,
              54,
              57,
              49,
              53,
              57,
              48,
              52,
              52,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 85,
          "responseSize": 777
        },
        "id": "5c62ffcc-2c5b-47e6-be8a-097526f4d440"
      },
      {
        "cursor": {
          "ref": "6934d9b4-1c5c-4638-bced-f6dd3e366b6c",
          "length": 14,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "14179b55-6768-4f8e-87f7-00c9f22b73f7"
        },
        "item": {
          "id": "82058a8a-d675-4ca4-8ed2-9d7f45cb0d63",
          "name": "Login",
          "request": {
            "url": {
              "path": [
                "User",
                "Login",
                "1.0.0"
              ],
              "host": [
                "{{BASE}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n   \"request\":{\n   \n   \n   \"data\":{\n   \n   \n   \t\"userID\":{{UserId}},\n\t\t\"password\":{{Password}}\n \n   },\n  \n  \n   \"appID\":{{APP_ID}}\n}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9370ec04-09cf-443a-8742-10cbecaffcc8",
                "type": "text/javascript",
                "exec": [
                  "eval(pm.globals.get('postmanBDD'));",
                  "eval(globals.basicResponseValidation)",
                  "",
                  "chai.use(basicResponseValidation)",
                  "",
                  "",
                  "//var responseJSON = response.body",
                  "var both_un_pwd_wrong = ((environment.UserId != \"MS6\") && (environment.Password != \"globe@678\")) ",
                  "var either_un_pwd_wrong = ((environment.UserId != \"MS6\") || (environment.Password != \"globe@678\"))",
                  "var un_crct_pwd_wrong = ((environment.UserId == \"MS6\") && (environment.Password != \"globe@678\"))",
                  "",
                  "//Valid username and password validation",
                  "if((environment.UserId== \"MS6\") && (environment.Password == \"globe@678\"))",
                  "{",
                  "    pm.environment.set(\"Attempts Remaining\",0)",
                  "    pm.environment.set(\"isLoggedIn\",true)",
                  "    //storing the sessionvalue",
                  "    pm.environment.set(\"session_id\",pm.cookies.get('sessionID'))",
                  "    ",
                  "    //checking logon status is 'OK'",
                  "    var logon_status_ok = it(\"Is logonstatus is 'OK'\", () =>",
                  "    {",
                  "       expect(response.body.response.data.logonStatus).to.eql(\"OK\");",
                  "      ",
                  "    });",
                  "    ",
                  "    //checking 2FA is enabled",
                  "    var is_2fa_enabled = it(\"is is2FA Enabled\", () =>",
                  "    {",
                  "        expect(response.body.response.data.is2FAEnabled).to.eql(true);",
                  "    })",
                  "    ",
                  "    it(\"Is userID in response is same as the actual username with which logged in\", () =>",
                  "    {",
                  "        expect(environment.UserId).to.eql(response.body.response.data.userID)",
                  "    })",
                  "    ",
                  "        ",
                  "    if(logon_status_ok && is_2fa_enabled)",
                  "    {",
                  "        postman.setNextRequest(\"2FA\");",
                  "    }",
                  "}",
                  "",
                  "else if(un_crct_pwd_wrong)",
                  "{",
                  "    it(\"Invalid Password\", () =>",
                  "    {",
                  "        if(pm.environment.get(\"Attempts Remaining\")<=19)",
                  "        {",
                  "            pm.environment.set(\"Attempts Remaining\",pm.environment.get(\"Attempts Remaining\")+1)",
                  "            expect(response.body.response.infoMsg).to.eql(\"Incorrect Client ID or Password. Attempt \"+pm.environment.get(\"Attempts Remaining\")+\" of 20\")",
                  "        }",
                  "        ",
                  "    })",
                  "    ",
                  "    postman.setNextRequest(\"Logout\")",
                  "   ",
                  "}",
                  "",
                  "//Both username and password are invalid",
                  "    else if ((environment.UserId === \"\") && (environment.Password === \"\"))",
                  "    {",
                  "        it(\"Is username and password field empty\", () =>",
                  "        {",
                  "            expect(response.body).to.be.empty",
                  "        })",
                  "        ",
                  "         postman.setNextRequest(\"Logout\")",
                  "    }",
                  "",
                  "//Both username or password is wrong (OR) Either of username or password is invalid ",
                  "    else if(both_un_pwd_wrong || either_un_pwd_wrong)",
                  "    {",
                  "        it(\"invalid  json response validation\", () =>",
                  "        {",
                  "            expect(response.body.response.infoMsg).to.equal(\"Incorrect Client ID or Password\")",
                  "        })",
                  "         postman.setNextRequest(\"Logout\")",
                  "    }",
                  "",
                  "",
                  "",
                  "//===========================================================================================================================",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "ec38a4dc-29f0-4d62-bff8-808bc5a7a947"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "36604118-cf51-4a64-bd92-43f15aa7d73f",
                "type": "text/javascript",
                "exec": [
                  "eval(globals.postmanBDD);",
                  "eval(globals.basicRequestValidation)",
                  "",
                  "",
                  "",
                  "/*",
                  "if(pm.environment.get(\"APP_ID\").length !== 32)",
                  "{",
                  "    if(pm.environment.get(\"APP_ID\").length < 32)",
                  "    {",
                  "        pm.test(\"Is APP_ID has 32 characters\",function()",
                  "        {",
                  "            expect((pm.environment.get(\"APP_ID\").length) === 32,\"Length of APP_ID is less than 32\");   ",
                  "        });",
                  "        ",
                  "    }",
                  "    else if(pm.environment.get(\"APP_ID\").length > 32)",
                  "    {",
                  "        pm.test(\"Is APP_ID has 32 characters\",function()",
                  "        {",
                  "            assert((pm.environment.get(\"APP_ID\").length) === 32,\"Length of APP_ID is greater than 32\");",
                  "        });",
                  "        ",
                  "    }",
                  "    postman.setNextRequest(null);",
                  "}",
                  "",
                  "*/",
                  "",
                  "chai.use(basicRequestValidation)",
                  "",
                  "",
                  "//Request json validation should contain keys['userID','Password']",
                  "/*var request_json = JSON.parse(pm.request.body.raw)",
                  "",
                  "it(\"Is request json has keys userid and password\", () =>",
                  "{",
                  "    expect(request_json.request.data).should.have.keys(['userID', 'Password'])",
                  "})",
                  "*/",
                  "",
                  ""
                ],
                "_lastExecutionId": "8b0f47d6-e50c-4d12-bc29-355c13ad7513"
              }
            }
          ]
        },
        "assertions": [
          {
            "assertion": "1. Basic Request checks - is Base URL correct",
            "skipped": false
          },
          {
            "assertion": "1. Basic Response Checks - The response is json",
            "skipped": false
          },
          {
            "assertion": "2. Basic Response Checks - status code is 200",
            "skipped": false
          },
          {
            "assertion": "3. Invalid Password (expected 'Incorrect Client ID or Password. Attempt 12 of 20' to deeply equal 'Incorrect Client ID or Password. Attempt 3 of 20')",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "3. Invalid Password (expected 'Incorrect Client ID or Password. Attempt 12 of 20' to deeply equal 'Incorrect Client ID or Password. Attempt 3 of 20')",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:3:3)"
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "globecapital",
              "User",
              "Login",
              "1.0.0"
            ],
            "host": [
              "mdev-ws",
              "globextranet",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.21.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9ab7ead1-b9ab-4db3-a83f-82273f491b68",
              "system": true
            },
            {
              "key": "Host",
              "value": "mdev-ws.globextranet.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 150,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n   \"request\":{\n   \n   \n   \"data\":{\n   \n   \n   \t\"userID\":MS6,\n\t\t\"password\":globe@678678\n \n   },\n  \n  \n   \"appID\":51c3a70f53e11c6999734132aedeb7a0\n}\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ed5d0107-81b7-46b9-99cb-9a1599cda18f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "RioServer"
            },
            {
              "key": "Date",
              "value": "Fri, 21 Feb 2020 07:12:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=UTF-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Expose-Headers",
              "value": "Set-Cookie, Cookie, Content-Type"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "POST"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              105,
              110,
              102,
              111,
              73,
              68,
              34,
              58,
              34,
              69,
              71,
              78,
              48,
              48,
              50,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              125,
              44,
              34,
              105,
              110,
              102,
              111,
              77,
              115,
              103,
              34,
              58,
              34,
              73,
              110,
              99,
              111,
              114,
              114,
              101,
              99,
              116,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              73,
              68,
              32,
              111,
              114,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              32,
              65,
              116,
              116,
              101,
              109,
              112,
              116,
              32,
              49,
              50,
              32,
              111,
              102,
              32,
              50,
              48,
              34,
              44,
              34,
              109,
              115,
              103,
              73,
              68,
              34,
              58,
              34,
              97,
              57,
              49,
              99,
              55,
              48,
              100,
              48,
              45,
              49,
              50,
              49,
              102,
              45,
              52,
              55,
              48,
              99,
              45,
              57,
              51,
              50,
              99,
              45,
              102,
              54,
              97,
              55,
              57,
              51,
              52,
              57,
              53,
              98,
              48,
              99,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              84,
              105,
              109,
              101,
              34,
              58,
              34,
              49,
              53,
              56,
              50,
              50,
              54,
              57,
              49,
              53,
              57,
              50,
              56,
              48,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 521,
          "responseSize": 180
        },
        "id": "82058a8a-d675-4ca4-8ed2-9d7f45cb0d63"
      },
      {
        "cursor": {
          "ref": "f44cff65-d4ac-4cff-bfca-af80b386db2c",
          "length": 14,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4ce59e46-f5f8-4159-8a9c-f29d7326588c"
        },
        "item": {
          "id": "b58351b7-7f7d-49b9-9907-6e811e30922d",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "User",
                "LogOff",
                "1.0.0"
              ],
              "host": [
                "{{BASE}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"request\": {\r\n    \"data\": {},\r\n    \"appID\":  {{APP_ID}}\r\n  }\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad19b0f1-e4dd-44e9-ab60-3e2e69add2e1",
                "type": "text/javascript",
                "exec": [
                  "eval(globals.postmanBDD)",
                  "eval(globals.basicResponseValidation)",
                  "eval(globals.isSessionMaintained)",
                  "",
                  "pm.test(\"Status code is 200\", function () ",
                  "{",
                  "    pm.response.to.have.status(200);",
                  "}",
                  ");",
                  "//===================================================================================================================",
                  "pm.test(\"The response is JSON\",function()",
                  "{",
                  "    pm.response.to.be.json;",
                  "}",
                  ");",
                  "",
                  "chai.use(isSessionMaintained)",
                  "",
                  "/*",
                  "pm.environment.set(\"infoMsg\",pm.response.json().response.infoMsg);",
                  "",
                  "",
                  "",
                  "",
                  "if(pm.environment.get(\"infoMsg\") === \"\")",
                  "{",
                  "   pm.test(\"Successfull Logged out Validation\", function()",
                  "   {",
                  "       pm.expect(pm.response.json().response.data.msg === \"User Logged out sucessfull\");",
                  "   });",
                  "}",
                  "",
                  "else if(pm.environment.get(\"infoMsg\") === \"Request Failed\")",
                  "{",
                  "   pm.test(\"UnSuccessfull Logged out Validation\", function()",
                  "   {",
                  "       pm.expect(pm.response.json().response.infoMsg === \"Request Failed;\");",
                  "   });",
                  "}",
                  "",
                  "else",
                  "{",
                  "      pm.test(\"Logged in from some other terminal\", function()",
                  "   {",
                  "       pm.expect(pm.response.json().response.infoMsg === \"You have logged in from some other terminal\");",
                  "   });",
                  "}",
                  "",
                  "*/",
                  "if(environment.isLoggedIn === true)",
                  "{",
                  "   var isloggedout = it(\"Is Logged out\", () =>",
                  "    {",
                  "        expect(response.body.response.data.msg).to.equal('User logged out successfully')",
                  "    })",
                  "    ",
                  "    if(isloggedout === true)",
                  "    {",
                  "        pm.environment.set('isLoggedIn',false)",
                  "         postman.setNextRequest(null)",
                  "    }",
                  " ",
                  "}",
                  "else if(environment.isLoggedIn === false)",
                  "{",
                  "    it(\"Is clicking logout for more than once\", () =>",
                  "    {",
                  "         expect(response.body.response.infoMsg == 'Request Failed;')",
                  "    })",
                  "     postman.setNextRequest(null)",
                  "   ",
                  "}",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "08a16cc8-b0b4-44c1-8603-4860d2d5c2c5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "globecapital",
              "User",
              "LogOff",
              "1.0.0"
            ],
            "host": [
              "mdev-ws",
              "globextranet",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.21.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2d903b2a-f710-4974-be1d-e02a87c54108",
              "system": true
            },
            {
              "key": "Host",
              "value": "mdev-ws.globextranet.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 90,
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"request\": {\r\n    \"data\": {},\r\n    \"appID\":  51c3a70f53e11c6999734132aedeb7a0\r\n  }\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "72942dbe-8370-4a2d-b285-36cbf24bcff5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "RioServer"
            },
            {
              "key": "Date",
              "value": "Fri, 21 Feb 2020 07:12:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json;charset=UTF-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Expose-Headers",
              "value": "Set-Cookie, Cookie, Content-Type"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "POST"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              34,
              58,
              123,
              34,
              105,
              110,
              102,
              111,
              73,
              68,
              34,
              58,
              34,
              69,
              71,
              78,
              48,
              48,
              51,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              125,
              44,
              34,
              105,
              110,
              102,
              111,
              77,
              115,
              103,
              34,
              58,
              34,
              89,
              111,
              117,
              32,
              104,
              97,
              118,
              101,
              32,
              108,
              111,
              103,
              103,
              101,
              100,
              32,
              105,
              110,
              32,
              102,
              114,
              111,
              109,
              32,
              115,
              111,
              109,
              101,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              116,
              101,
              114,
              109,
              105,
              110,
              97,
              108,
              34,
              44,
              34,
              109,
              115,
              103,
              73,
              68,
              34,
              58,
              34,
              51,
              50,
              54,
              97,
              50,
              56,
              57,
              51,
              45,
              48,
              50,
              57,
              101,
              45,
              52,
              54,
              102,
              53,
              45,
              56,
              56,
              97,
              57,
              45,
              51,
              98,
              97,
              48,
              56,
              100,
              52,
              57,
              51,
              53,
              101,
              102,
              34,
              44,
              34,
              115,
              101,
              114,
              118,
              101,
              114,
              84,
              105,
              109,
              101,
              34,
              58,
              34,
              49,
              53,
              56,
              50,
              50,
              54,
              57,
              49,
              53,
              57,
              57,
              49,
              56,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 62,
          "responseSize": 174
        },
        "id": "b58351b7-7f7d-49b9-9907-6e811e30922d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "The response is JSON",
            "skipped": false
          },
          {
            "assertion": "1. Is sessionId maintained (expected undefined to deeply equal '7f84b72816e2905b7c123102f721ee72')",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "1. Is sessionId maintained (expected undefined to deeply equal '7f84b72816e2905b7c123102f721ee72')",
              "message": "expected false to be truthy",
              "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:3:14)"
            }
          },
          {
            "assertion": "2. Is clicking logout for more than once",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1299
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "3. Invalid Password (expected 'Incorrect Client ID or Password. Attempt 12 of 20' to deeply equal 'Incorrect Client ID or Password. Attempt 3 of 20')",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "012ff5fdaed7fb68ce3cd4de5dbb7c8c",
          "id": "c99baed5-ffe6-4090-8aba-0ea97984c16c",
          "timestamp": 1582269105050,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "82058a8a-d675-4ca4-8ed2-9d7f45cb0d63",
          "name": "Login",
          "request": {
            "url": {
              "path": [
                "User",
                "Login",
                "1.0.0"
              ],
              "host": [
                "{{BASE}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n   \"request\":{\n   \n   \n   \"data\":{\n   \n   \n   \t\"userID\":{{UserId}},\n\t\t\"password\":{{Password}}\n \n   },\n  \n  \n   \"appID\":{{APP_ID}}\n}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9370ec04-09cf-443a-8742-10cbecaffcc8",
                "type": "text/javascript",
                "exec": [
                  "eval(pm.globals.get('postmanBDD'));",
                  "eval(globals.basicResponseValidation)",
                  "",
                  "chai.use(basicResponseValidation)",
                  "",
                  "",
                  "//var responseJSON = response.body",
                  "var both_un_pwd_wrong = ((environment.UserId != \"MS6\") && (environment.Password != \"globe@678\")) ",
                  "var either_un_pwd_wrong = ((environment.UserId != \"MS6\") || (environment.Password != \"globe@678\"))",
                  "var un_crct_pwd_wrong = ((environment.UserId == \"MS6\") && (environment.Password != \"globe@678\"))",
                  "",
                  "//Valid username and password validation",
                  "if((environment.UserId== \"MS6\") && (environment.Password == \"globe@678\"))",
                  "{",
                  "    pm.environment.set(\"Attempts Remaining\",0)",
                  "    pm.environment.set(\"isLoggedIn\",true)",
                  "    //storing the sessionvalue",
                  "    pm.environment.set(\"session_id\",pm.cookies.get('sessionID'))",
                  "    ",
                  "    //checking logon status is 'OK'",
                  "    var logon_status_ok = it(\"Is logonstatus is 'OK'\", () =>",
                  "    {",
                  "       expect(response.body.response.data.logonStatus).to.eql(\"OK\");",
                  "      ",
                  "    });",
                  "    ",
                  "    //checking 2FA is enabled",
                  "    var is_2fa_enabled = it(\"is is2FA Enabled\", () =>",
                  "    {",
                  "        expect(response.body.response.data.is2FAEnabled).to.eql(true);",
                  "    })",
                  "    ",
                  "    it(\"Is userID in response is same as the actual username with which logged in\", () =>",
                  "    {",
                  "        expect(environment.UserId).to.eql(response.body.response.data.userID)",
                  "    })",
                  "    ",
                  "        ",
                  "    if(logon_status_ok && is_2fa_enabled)",
                  "    {",
                  "        postman.setNextRequest(\"2FA\");",
                  "    }",
                  "}",
                  "",
                  "else if(un_crct_pwd_wrong)",
                  "{",
                  "    it(\"Invalid Password\", () =>",
                  "    {",
                  "        if(pm.environment.get(\"Attempts Remaining\")<=19)",
                  "        {",
                  "            pm.environment.set(\"Attempts Remaining\",pm.environment.get(\"Attempts Remaining\")+1)",
                  "            expect(response.body.response.infoMsg).to.eql(\"Incorrect Client ID or Password. Attempt \"+pm.environment.get(\"Attempts Remaining\")+\" of 20\")",
                  "        }",
                  "        ",
                  "    })",
                  "    ",
                  "    postman.setNextRequest(\"Logout\")",
                  "   ",
                  "}",
                  "",
                  "//Both username and password are invalid",
                  "    else if ((environment.UserId === \"\") && (environment.Password === \"\"))",
                  "    {",
                  "        it(\"Is username and password field empty\", () =>",
                  "        {",
                  "            expect(response.body).to.be.empty",
                  "        })",
                  "        ",
                  "         postman.setNextRequest(\"Logout\")",
                  "    }",
                  "",
                  "//Both username or password is wrong (OR) Either of username or password is invalid ",
                  "    else if(both_un_pwd_wrong || either_un_pwd_wrong)",
                  "    {",
                  "        it(\"invalid  json response validation\", () =>",
                  "        {",
                  "            expect(response.body.response.infoMsg).to.equal(\"Incorrect Client ID or Password\")",
                  "        })",
                  "         postman.setNextRequest(\"Logout\")",
                  "    }",
                  "",
                  "",
                  "",
                  "//===========================================================================================================================",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "ec38a4dc-29f0-4d62-bff8-808bc5a7a947"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "36604118-cf51-4a64-bd92-43f15aa7d73f",
                "type": "text/javascript",
                "exec": [
                  "eval(globals.postmanBDD);",
                  "eval(globals.basicRequestValidation)",
                  "",
                  "",
                  "",
                  "/*",
                  "if(pm.environment.get(\"APP_ID\").length !== 32)",
                  "{",
                  "    if(pm.environment.get(\"APP_ID\").length < 32)",
                  "    {",
                  "        pm.test(\"Is APP_ID has 32 characters\",function()",
                  "        {",
                  "            expect((pm.environment.get(\"APP_ID\").length) === 32,\"Length of APP_ID is less than 32\");   ",
                  "        });",
                  "        ",
                  "    }",
                  "    else if(pm.environment.get(\"APP_ID\").length > 32)",
                  "    {",
                  "        pm.test(\"Is APP_ID has 32 characters\",function()",
                  "        {",
                  "            assert((pm.environment.get(\"APP_ID\").length) === 32,\"Length of APP_ID is greater than 32\");",
                  "        });",
                  "        ",
                  "    }",
                  "    postman.setNextRequest(null);",
                  "}",
                  "",
                  "*/",
                  "",
                  "chai.use(basicRequestValidation)",
                  "",
                  "",
                  "//Request json validation should contain keys['userID','Password']",
                  "/*var request_json = JSON.parse(pm.request.body.raw)",
                  "",
                  "it(\"Is request json has keys userid and password\", () =>",
                  "{",
                  "    expect(request_json.request.data).should.have.keys(['userID', 'Password'])",
                  "})",
                  "*/",
                  "",
                  ""
                ],
                "_lastExecutionId": "8b0f47d6-e50c-4d12-bc29-355c13ad7513"
              }
            }
          ]
        },
        "parent": {
          "id": "83445bba-5753-4285-a9b1-a74f7242b916",
          "name": "Login and 2FA",
          "item": [
            {
              "id": "82058a8a-d675-4ca4-8ed2-9d7f45cb0d63",
              "name": "Login",
              "request": {
                "url": {
                  "path": [
                    "User",
                    "Login",
                    "1.0.0"
                  ],
                  "host": [
                    "{{BASE}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n   \"request\":{\n   \n   \n   \"data\":{\n   \n   \n   \t\"userID\":{{UserId}},\n\t\t\"password\":{{Password}}\n \n   },\n  \n  \n   \"appID\":{{APP_ID}}\n}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9370ec04-09cf-443a-8742-10cbecaffcc8",
                    "type": "text/javascript",
                    "exec": [
                      "eval(pm.globals.get('postmanBDD'));",
                      "eval(globals.basicResponseValidation)",
                      "",
                      "chai.use(basicResponseValidation)",
                      "",
                      "",
                      "//var responseJSON = response.body",
                      "var both_un_pwd_wrong = ((environment.UserId != \"MS6\") && (environment.Password != \"globe@678\")) ",
                      "var either_un_pwd_wrong = ((environment.UserId != \"MS6\") || (environment.Password != \"globe@678\"))",
                      "var un_crct_pwd_wrong = ((environment.UserId == \"MS6\") && (environment.Password != \"globe@678\"))",
                      "",
                      "//Valid username and password validation",
                      "if((environment.UserId== \"MS6\") && (environment.Password == \"globe@678\"))",
                      "{",
                      "    pm.environment.set(\"Attempts Remaining\",0)",
                      "    pm.environment.set(\"isLoggedIn\",true)",
                      "    //storing the sessionvalue",
                      "    pm.environment.set(\"session_id\",pm.cookies.get('sessionID'))",
                      "    ",
                      "    //checking logon status is 'OK'",
                      "    var logon_status_ok = it(\"Is logonstatus is 'OK'\", () =>",
                      "    {",
                      "       expect(response.body.response.data.logonStatus).to.eql(\"OK\");",
                      "      ",
                      "    });",
                      "    ",
                      "    //checking 2FA is enabled",
                      "    var is_2fa_enabled = it(\"is is2FA Enabled\", () =>",
                      "    {",
                      "        expect(response.body.response.data.is2FAEnabled).to.eql(true);",
                      "    })",
                      "    ",
                      "    it(\"Is userID in response is same as the actual username with which logged in\", () =>",
                      "    {",
                      "        expect(environment.UserId).to.eql(response.body.response.data.userID)",
                      "    })",
                      "    ",
                      "        ",
                      "    if(logon_status_ok && is_2fa_enabled)",
                      "    {",
                      "        postman.setNextRequest(\"2FA\");",
                      "    }",
                      "}",
                      "",
                      "else if(un_crct_pwd_wrong)",
                      "{",
                      "    it(\"Invalid Password\", () =>",
                      "    {",
                      "        if(pm.environment.get(\"Attempts Remaining\")<=19)",
                      "        {",
                      "            pm.environment.set(\"Attempts Remaining\",pm.environment.get(\"Attempts Remaining\")+1)",
                      "            expect(response.body.response.infoMsg).to.eql(\"Incorrect Client ID or Password. Attempt \"+pm.environment.get(\"Attempts Remaining\")+\" of 20\")",
                      "        }",
                      "        ",
                      "    })",
                      "    ",
                      "    postman.setNextRequest(\"Logout\")",
                      "   ",
                      "}",
                      "",
                      "//Both username and password are invalid",
                      "    else if ((environment.UserId === \"\") && (environment.Password === \"\"))",
                      "    {",
                      "        it(\"Is username and password field empty\", () =>",
                      "        {",
                      "            expect(response.body).to.be.empty",
                      "        })",
                      "        ",
                      "         postman.setNextRequest(\"Logout\")",
                      "    }",
                      "",
                      "//Both username or password is wrong (OR) Either of username or password is invalid ",
                      "    else if(both_un_pwd_wrong || either_un_pwd_wrong)",
                      "    {",
                      "        it(\"invalid  json response validation\", () =>",
                      "        {",
                      "            expect(response.body.response.infoMsg).to.equal(\"Incorrect Client ID or Password\")",
                      "        })",
                      "         postman.setNextRequest(\"Logout\")",
                      "    }",
                      "",
                      "",
                      "",
                      "//===========================================================================================================================",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "ec38a4dc-29f0-4d62-bff8-808bc5a7a947"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "36604118-cf51-4a64-bd92-43f15aa7d73f",
                    "type": "text/javascript",
                    "exec": [
                      "eval(globals.postmanBDD);",
                      "eval(globals.basicRequestValidation)",
                      "",
                      "",
                      "",
                      "/*",
                      "if(pm.environment.get(\"APP_ID\").length !== 32)",
                      "{",
                      "    if(pm.environment.get(\"APP_ID\").length < 32)",
                      "    {",
                      "        pm.test(\"Is APP_ID has 32 characters\",function()",
                      "        {",
                      "            expect((pm.environment.get(\"APP_ID\").length) === 32,\"Length of APP_ID is less than 32\");   ",
                      "        });",
                      "        ",
                      "    }",
                      "    else if(pm.environment.get(\"APP_ID\").length > 32)",
                      "    {",
                      "        pm.test(\"Is APP_ID has 32 characters\",function()",
                      "        {",
                      "            assert((pm.environment.get(\"APP_ID\").length) === 32,\"Length of APP_ID is greater than 32\");",
                      "        });",
                      "        ",
                      "    }",
                      "    postman.setNextRequest(null);",
                      "}",
                      "",
                      "*/",
                      "",
                      "chai.use(basicRequestValidation)",
                      "",
                      "",
                      "//Request json validation should contain keys['userID','Password']",
                      "/*var request_json = JSON.parse(pm.request.body.raw)",
                      "",
                      "it(\"Is request json has keys userid and password\", () =>",
                      "{",
                      "    expect(request_json.request.data).should.have.keys(['userID', 'Password'])",
                      "})",
                      "*/",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "8b0f47d6-e50c-4d12-bc29-355c13ad7513"
                  }
                }
              ]
            },
            {
              "id": "ed62150d-a29d-4dfe-8a38-efade91508d9",
              "name": "Login Copy",
              "request": {
                "url": {
                  "path": [
                    "User",
                    "Login",
                    "1.0.0"
                  ],
                  "host": [
                    "{{BASE}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n   \"request\":{\n   \n   \n   \"data\":{\n   \n   \n   \t\"userID\":{{UserId}},\n\t\t\"password\":{{Password}}\n \n   },\n  \n  \n   \"appID\":{{APP_ID}}\n}\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9370ec04-09cf-443a-8742-10cbecaffcc8",
                    "type": "text/javascript",
                    "exec": [
                      "eval(pm.globals.get(\"postmanBDD\"));",
                      "",
                      "var assert = require('chai').assert;",
                      "var expect = require('chai').expect;",
                      "",
                      "",
                      "expect(pm.response.to.have.status(200),\"Status code should be 200\");",
                      "",
                      "console.log(pm.environment.get(\"APP_ID\").length);",
                      "",
                      "",
                      "",
                      "",
                      "//============================================================================================================================",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "36604118-cf51-4a64-bd92-43f15aa7d73f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ]
            },
            {
              "id": "4eeac47c-0214-4e81-9bd2-ddc9b5612882",
              "name": "2FA",
              "request": {
                "url": {
                  "path": [
                    "User",
                    "Validate2FA",
                    "1.0.0"
                  ],
                  "host": [
                    "{{BASE}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"request\": {\r\n\r\n\"data\": {\r\n      \"token\": \"01012019\"\r\n},\r\n\"appID\":{{APP_ID}}\r\n  }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "241aef44-8919-4fee-a77b-1a3fd8c182e1",
                    "type": "text/javascript",
                    "exec": [
                      "eval(pm.globals.get('postmanBDD'));",
                      "eval(globals.basicResponseValidation)",
                      "",
                      "chai.use(basicResponseValidation)",
                      "",
                      "function isSessionMaintained()",
                      "{",
                      "    it(\"Is sessionId Maintained\", () =>",
                      "    {",
                      "        expect(pm.cookies.get('sessionID')).to.eql(environment.session_id)",
                      "    })",
                      "}",
                      "postman.setGlobalVariable(\"isSessionMaintained\",isSessionMaintained)",
                      "",
                      "if((environment.UserId == \"MS6\") && (environment.Password == \"globe@678\") && (environment.token == \"01012019\"))",
                      "{",
                      "    chai.use(isSessionMaintained)",
                      "    ",
                      "    it(\"is OTP validated successfully\" , () =>",
                      "    {",
                      "        expect(response.body.response.data.msg).to.eql(\"OTP validated successfully\")",
                      "    })",
                      "}",
                      "",
                      "",
                      "else if ((environment.UserId == \"MS6\") && (environment.Password== \"globe@678\") && (environment.token === null))",
                      "{",
                      "    ",
                      "    it(\"Empty OTP validation\" ,() => ",
                      "    {",
                      "        expect(response.body.response.data.msg).to.eql(\"Please Enter OTP\")",
                      "    })",
                      "}",
                      "",
                      "",
                      "else if ((environment.UserId== \"MS6\") && (environment.Password == \"globe@678\") && (environment.token!= \"01012019\")) ",
                      "{",
                      "    ",
                      "    it(\"invalid OTP validation\" , () =>",
                      "    {",
                      "        expect(response.body.response.data.msg).to.eql(\"invalid OTP\")",
                      "    })",
                      "}",
                      "",
                      "",
                      "postman.setNextRequest(\"Logout\");",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "53df53a3-6cbd-4ace-9786-6866c3e32373",
                    "type": "text/javascript",
                    "exec": [
                      "eval(globals.postmanBDD);",
                      "eval(globals.basicRequestValidation)",
                      "",
                      "chai.use(basicRequestValidation)",
                      ""
                    ]
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "6934d9b4-1c5c-4638-bced-f6dd3e366b6c",
          "length": 14,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "14179b55-6768-4f8e-87f7-00c9f22b73f7",
          "scriptId": "9370ec04-09cf-443a-8742-10cbecaffcc8",
          "execution": "ec38a4dc-29f0-4d62-bff8-808bc5a7a947"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "1. Is sessionId maintained (expected undefined to deeply equal '7f84b72816e2905b7c123102f721ee72')",
          "message": "expected false to be truthy",
          "stack": "AssertionError: expected false to be truthy\n   at Object.eval sandbox-script.js:3:14)",
          "checksum": "6054d94b1556b12d2bc16efd3185de26",
          "id": "a38281fa-699c-485f-8715-e6e92d54293b",
          "timestamp": 1582269105225,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "b58351b7-7f7d-49b9-9907-6e811e30922d",
          "name": "Logout",
          "request": {
            "url": {
              "path": [
                "User",
                "LogOff",
                "1.0.0"
              ],
              "host": [
                "{{BASE}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"request\": {\r\n    \"data\": {},\r\n    \"appID\":  {{APP_ID}}\r\n  }\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad19b0f1-e4dd-44e9-ab60-3e2e69add2e1",
                "type": "text/javascript",
                "exec": [
                  "eval(globals.postmanBDD)",
                  "eval(globals.basicResponseValidation)",
                  "eval(globals.isSessionMaintained)",
                  "",
                  "pm.test(\"Status code is 200\", function () ",
                  "{",
                  "    pm.response.to.have.status(200);",
                  "}",
                  ");",
                  "//===================================================================================================================",
                  "pm.test(\"The response is JSON\",function()",
                  "{",
                  "    pm.response.to.be.json;",
                  "}",
                  ");",
                  "",
                  "chai.use(isSessionMaintained)",
                  "",
                  "/*",
                  "pm.environment.set(\"infoMsg\",pm.response.json().response.infoMsg);",
                  "",
                  "",
                  "",
                  "",
                  "if(pm.environment.get(\"infoMsg\") === \"\")",
                  "{",
                  "   pm.test(\"Successfull Logged out Validation\", function()",
                  "   {",
                  "       pm.expect(pm.response.json().response.data.msg === \"User Logged out sucessfull\");",
                  "   });",
                  "}",
                  "",
                  "else if(pm.environment.get(\"infoMsg\") === \"Request Failed\")",
                  "{",
                  "   pm.test(\"UnSuccessfull Logged out Validation\", function()",
                  "   {",
                  "       pm.expect(pm.response.json().response.infoMsg === \"Request Failed;\");",
                  "   });",
                  "}",
                  "",
                  "else",
                  "{",
                  "      pm.test(\"Logged in from some other terminal\", function()",
                  "   {",
                  "       pm.expect(pm.response.json().response.infoMsg === \"You have logged in from some other terminal\");",
                  "   });",
                  "}",
                  "",
                  "*/",
                  "if(environment.isLoggedIn === true)",
                  "{",
                  "   var isloggedout = it(\"Is Logged out\", () =>",
                  "    {",
                  "        expect(response.body.response.data.msg).to.equal('User logged out successfully')",
                  "    })",
                  "    ",
                  "    if(isloggedout === true)",
                  "    {",
                  "        pm.environment.set('isLoggedIn',false)",
                  "         postman.setNextRequest(null)",
                  "    }",
                  " ",
                  "}",
                  "else if(environment.isLoggedIn === false)",
                  "{",
                  "    it(\"Is clicking logout for more than once\", () =>",
                  "    {",
                  "         expect(response.body.response.infoMsg == 'Request Failed;')",
                  "    })",
                  "     postman.setNextRequest(null)",
                  "   ",
                  "}",
                  "",
                  "",
                  "",
                  "",
                  "",
                  ""
                ],
                "_lastExecutionId": "08a16cc8-b0b4-44c1-8603-4860d2d5c2c5"
              }
            }
          ]
        },
        "parent": {
          "id": "1ccfed0c-aecf-4bd8-a0db-c6dbbef99dee",
          "name": "Logoff",
          "item": [
            {
              "id": "b58351b7-7f7d-49b9-9907-6e811e30922d",
              "name": "Logout",
              "request": {
                "url": {
                  "path": [
                    "User",
                    "LogOff",
                    "1.0.0"
                  ],
                  "host": [
                    "{{BASE}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"request\": {\r\n    \"data\": {},\r\n    \"appID\":  {{APP_ID}}\r\n  }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad19b0f1-e4dd-44e9-ab60-3e2e69add2e1",
                    "type": "text/javascript",
                    "exec": [
                      "eval(globals.postmanBDD)",
                      "eval(globals.basicResponseValidation)",
                      "eval(globals.isSessionMaintained)",
                      "",
                      "pm.test(\"Status code is 200\", function () ",
                      "{",
                      "    pm.response.to.have.status(200);",
                      "}",
                      ");",
                      "//===================================================================================================================",
                      "pm.test(\"The response is JSON\",function()",
                      "{",
                      "    pm.response.to.be.json;",
                      "}",
                      ");",
                      "",
                      "chai.use(isSessionMaintained)",
                      "",
                      "/*",
                      "pm.environment.set(\"infoMsg\",pm.response.json().response.infoMsg);",
                      "",
                      "",
                      "",
                      "",
                      "if(pm.environment.get(\"infoMsg\") === \"\")",
                      "{",
                      "   pm.test(\"Successfull Logged out Validation\", function()",
                      "   {",
                      "       pm.expect(pm.response.json().response.data.msg === \"User Logged out sucessfull\");",
                      "   });",
                      "}",
                      "",
                      "else if(pm.environment.get(\"infoMsg\") === \"Request Failed\")",
                      "{",
                      "   pm.test(\"UnSuccessfull Logged out Validation\", function()",
                      "   {",
                      "       pm.expect(pm.response.json().response.infoMsg === \"Request Failed;\");",
                      "   });",
                      "}",
                      "",
                      "else",
                      "{",
                      "      pm.test(\"Logged in from some other terminal\", function()",
                      "   {",
                      "       pm.expect(pm.response.json().response.infoMsg === \"You have logged in from some other terminal\");",
                      "   });",
                      "}",
                      "",
                      "*/",
                      "if(environment.isLoggedIn === true)",
                      "{",
                      "   var isloggedout = it(\"Is Logged out\", () =>",
                      "    {",
                      "        expect(response.body.response.data.msg).to.equal('User logged out successfully')",
                      "    })",
                      "    ",
                      "    if(isloggedout === true)",
                      "    {",
                      "        pm.environment.set('isLoggedIn',false)",
                      "         postman.setNextRequest(null)",
                      "    }",
                      " ",
                      "}",
                      "else if(environment.isLoggedIn === false)",
                      "{",
                      "    it(\"Is clicking logout for more than once\", () =>",
                      "    {",
                      "         expect(response.body.response.infoMsg == 'Request Failed;')",
                      "    })",
                      "     postman.setNextRequest(null)",
                      "   ",
                      "}",
                      "",
                      "",
                      "",
                      "",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "08a16cc8-b0b4-44c1-8603-4860d2d5c2c5"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "f44cff65-d4ac-4cff-bfca-af80b386db2c",
          "length": 14,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4ce59e46-f5f8-4159-8a9c-f29d7326588c",
          "scriptId": "ad19b0f1-e4dd-44e9-ab60-3e2e69add2e1",
          "execution": "08a16cc8-b0b4-44c1-8603-4860d2d5c2c5"
        }
      }
    ],
    "error": null
  }
}
